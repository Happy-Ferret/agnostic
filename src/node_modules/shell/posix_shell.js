module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = peg$FAILED,
        peg$c1 = void 0,
        peg$c2 = "{",
        peg$c3 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c4 = "}",
        peg$c5 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c6 = "!",
        peg$c7 = { type: "literal", value: "!", description: "\"!\"" },
        peg$c8 = "if",
        peg$c9 = { type: "literal", value: "if", description: "\"if\"" },
        peg$c10 = "then",
        peg$c11 = { type: "literal", value: "then", description: "\"then\"" },
        peg$c12 = "else",
        peg$c13 = { type: "literal", value: "else", description: "\"else\"" },
        peg$c14 = "elif",
        peg$c15 = { type: "literal", value: "elif", description: "\"elif\"" },
        peg$c16 = "fi",
        peg$c17 = { type: "literal", value: "fi", description: "\"fi\"" },
        peg$c18 = "do",
        peg$c19 = { type: "literal", value: "do", description: "\"do\"" },
        peg$c20 = "done",
        peg$c21 = { type: "literal", value: "done", description: "\"done\"" },
        peg$c22 = "case",
        peg$c23 = { type: "literal", value: "case", description: "\"case\"" },
        peg$c24 = "esac",
        peg$c25 = { type: "literal", value: "esac", description: "\"esac\"" },
        peg$c26 = "while",
        peg$c27 = { type: "literal", value: "while", description: "\"while\"" },
        peg$c28 = "until",
        peg$c29 = { type: "literal", value: "until", description: "\"until\"" },
        peg$c30 = "for",
        peg$c31 = { type: "literal", value: "for", description: "\"for\"" },
        peg$c32 = "in",
        peg$c33 = { type: "literal", value: "in", description: "\"in\"" },
        peg$c34 = function(a) { return a ; },
        peg$c35 = [],
        peg$c36 = function(first, rest) {
        		parser_debug("Tokens_Command, text ='" + text() + "' offset = " + offset() ) ;
                var results = first ;
                rest.forEach(function(item){
                    var delim = item[0];
                    var tokens = item[1];
                    results.push(delim); // Emptydelimiter is one item
                    results = results.concat(tokens); // Tokens is an array of items, add each one
                });
        		return results;
        	},
        peg$c37 = /^[^|&;<>()$`'\\"'\n]/,
        peg$c38 = { type: "class", value: "[^|&;<>()$`'\\\\\"'\\n]", description: "[^|&;<>()$`'\\\\\"'\\n]" },
        peg$c39 = function(value) { return { "literal" : value.join("") }; },
        peg$c40 = function(items) { return items; },
        peg$c41 = /^[^|&;`<>()$\\" \t'\n]/,
        peg$c42 = { type: "class", value: "[^|&;`<>()$\\\\\" \\t'\\n]", description: "[^|&;`<>()$\\\\\" \\t'\\n]" },
        peg$c43 = /^[^}$'\\"\n]/,
        peg$c44 = { type: "class", value: "[^}$'\\\\\"\\n]", description: "[^}$'\\\\\"\\n]" },
        peg$c45 = /^[^$"\n]/,
        peg$c46 = { type: "class", value: "[^$\"\\n]", description: "[^$\"\\n]" },
        peg$c47 = /^[0-9]/,
        peg$c48 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c49 = /^[<>]/,
        peg$c50 = { type: "class", value: "[<>]", description: "[<>]" },
        peg$c51 = "'",
        peg$c52 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c53 = function(value) { return { "singlequotedstring" : value.join("") } ; },
        peg$c54 = "\\",
        peg$c55 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c56 = { type: "any", description: "any character" },
        peg$c57 = function(value) { return value ; },
        peg$c58 = "\"",
        peg$c59 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c60 = function(value) { return { "doublequotedstring" : value } ; },
        peg$c61 = function(value) { return { "literal" : "\\" + value } ; },
        peg$c62 = "\n",
        peg$c63 = { type: "literal", value: "\n", description: "\"\\n\"" },
        peg$c64 = /^[\n\t ]/,
        peg$c65 = { type: "class", value: "[\\n\\t ]", description: "[\\n\\t ]" },
        peg$c66 = function() { return { "delimiter" : null }; },
        peg$c67 = /^[A-Za-z_]/,
        peg$c68 = { type: "class", value: "[A-Za-z_]", description: "[A-Za-z_]" },
        peg$c69 = /^[A-Za-z0-9_]/,
        peg$c70 = { type: "class", value: "[A-Za-z0-9_]", description: "[A-Za-z0-9_]" },
        peg$c71 = function() { return text(); },
        peg$c72 = function() { return parseInt(text()); },
        peg$c73 = null,
        peg$c74 = "<",
        peg$c75 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c76 = function(fd, file_name) {
        		if (fd === null)
        			fd = 0 ; /* Default FD is STDIN/0 if not defined */
        		return { 'redirection' :
        			{ 'type':'input_file',
        			  'filename': file_name,
        			  'filedescriptor': fd } } ;
        		},
        peg$c77 = ">",
        peg$c78 = { type: "literal", value: ">", description: "\">\"" },
        peg$c79 = "|",
        peg$c80 = { type: "literal", value: "|", description: "\"|\"" },
        peg$c81 = function(fd, forceclobber, file_name) {
        		if (fd === null)
        			fd = 1 ; /* Default FD is STDOUT/1 if not defined */
        		return { 'redirection' :
        			{ 'type':'output_file',
        			  'filename': file_name,
        			  'forceclobber': (forceclobber!==null),
        			  'filedescriptor': fd } } ;
        		},
        peg$c82 = ">>",
        peg$c83 = { type: "literal", value: ">>", description: "\">>\"" },
        peg$c84 = function(fd, file_name) {
        		if (fd === null)
        			fd = 1 ; /* Default FD is STDOUT/1 if not defined */
        		return { 'redirection' :
        			{ 'type':'append_file',
        			  'filename': file_name,
        			  'filedescriptor': fd } } ;
        		},
        peg$c85 = "<<",
        peg$c86 = { type: "literal", value: "<<", description: "\"<<\"" },
        peg$c87 = function(fd) {
        			error("Here-Documents (<< operators) are not supported in this program");
        		},
        peg$c88 = "-",
        peg$c89 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c90 = "<&",
        peg$c91 = { type: "literal", value: "<&", description: "\"<&\"" },
        peg$c92 = function(fd, file_name) {
        		if (fd === null)
        			fd = 0 ; /* Default FD is STDIN/0 if not defined */
        		return { 'redirection' :
        			{ 'type':'input_dup_fd',
        			  'filename': file_name[0],
        			  'filedescriptor': fd } } ;
        		},
        peg$c93 = ">&",
        peg$c94 = { type: "literal", value: ">&", description: "\">&\"" },
        peg$c95 = function(fd, file_name) {
        		if (fd === null)
        			fd = 1 ; /* Default FD is STDOUT/1 if not defined */
        		return { 'redirection' :
        			{ 'type':'output_dup_fd',
        			  'filename': file_name[0],
        			  'filedescriptor': fd } } ;
        		},
        peg$c96 = "<>",
        peg$c97 = { type: "literal", value: "<>", description: "\"<>\"" },
        peg$c98 = function(fd, file_name) {
        		if (fd === null)
        			fd = 0 ; /* Default FD is STDIN/0 if not defined */
        		return { 'redirection' :
        			{ 'type':'inout_file',
        			  'filename': file_name,
        			  'filedescriptor': fd } } ;
        		},
        peg$c99 = function(item) {
        		 parser_debug("Redirection, text ='" + text() + "' offset = " + offset() ) ;
        		return item;
        		},
        peg$c100 = "=",
        peg$c101 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c102 = function(vari_name, value) {
        	  parser_debug("Assignments, text ='" + text() + "' offset = " + offset() ) ;
        	  if (!value) {
        		//In case of empty assignment (e..g "FOO="),
        		//emulate it as "FOO=''" )
        		value = [ { literal : "" } ];
        	  }
        	  var tmp={}; tmp[vari_name]=value; return { 'assignment' :tmp }; },
        peg$c103 = function(first, rest) {
        		parser_debug("Assignments_or_Redirections, text ='" + text() + "' offset = " + offset() ) ;
        		return Array.prototype.concat.apply(first,rest); },
        peg$c104 = function(first, rest) {
        		parser_debug("Redirections, text ='" + text() + "' offset = " + offset() ) ;
        		return Array.prototype.concat.apply(first,rest); },
        peg$c105 = function(prefix, cmd, suffix) {
        		parser_debug("SimpleCommand(form1), text ='" + text() + "' offset = " + offset() ) ;
        		return pack_simple_command(prefix, cmd, suffix); },
        peg$c106 = function(prefix, cmd) {
        		parser_debug("SimpleCommand(form2), text ='" + text() + "' offset = " + offset() ) ;
        		return pack_simple_command(prefix, cmd, []); },
        peg$c107 = function(prefix) {
        		parser_debug("SimpleCommand(form3), text ='" + text() + "' offset = " + offset() ) ;
        		return pack_simple_command(prefix, null, []); },
        peg$c108 = function(cmd, suffix) {
        		parser_debug("SimpleCommand(form4), text ='" + text() + "' offset = " + offset() ) ;
        		return pack_simple_command([], cmd, suffix); },
        peg$c109 = function(cmd) {
        		parser_debug("SimpleCommand(form5), text ='" + text() + "' offset = " + offset() ) ;
        		return pack_simple_command([], cmd, []); },
        peg$c110 = function(cmd) { return cmd ; },
        peg$c111 = "(",
        peg$c112 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c113 = ")",
        peg$c114 = { type: "literal", value: ")", description: "\")\"" },
        peg$c115 = function(cmd) { return { "compound_subshell" : cmd } ; },
        peg$c116 = function(cmd) { return { "compound_currentshell" : cmd } ; },
        peg$c117 = function(cmd) { return cmd; },
        peg$c118 = function(first, rest) {
                var results = first ;
                rest.forEach(function(item){
                    var delim = item[0];
                    var tokens = item[1];
                    results.push(delim); // Emptydelimiter is one item
                    results = results.concat(tokens); // Tokens is an array of items, add each one
                });
        		return results;
        	},
        peg$c119 = ";",
        peg$c120 = { type: "literal", value: ";", description: "\";\"" },
        peg$c121 = function(name, wordlist, action) { return { "for_clause": { "varname" : name, "wordlist" : wordlist, "action":action } }; },
        peg$c122 = function(condition, then_commands, elif_parts, else_part) {
        		   var ifs = [ { "condition" : condition, "action" : then_commands } ];
        		   if (elif_parts) {
        			elif_parts.forEach(function(a){ifs.push(a)});
        	           }
        		   if (else_part) {
        			ifs.push( { "condition" : "else", "action" : else_part } );
        		   }
        		   return { "if_clause" : ifs } ;
        		},
        peg$c123 = function(condition, then_commands) {
        		   return { "condition" : condition, "action" : then_commands } ;
        		},
        peg$c124 = function(then_commands) {
        		   return then_commands ;
        		},
        peg$c125 = function(type, condition, action) {
        			  return { "while_until_clause" : {
        					"type" : type,
        					"condition" : condition,
        					"action" : action
        				} } ;
        			},
        peg$c126 = "||",
        peg$c127 = { type: "literal", value: "||", description: "\"||\"" },
        peg$c128 = function(first, rest) {
        			parser_debug("Pipeline, text ='" + text() + "' offset = " + offset() ) ;

        			if (rest.length === 0)
        				return first;
        			if (first === null) /* have a pipe character, but the first command is empty */
        				error("expected valid command before |");

        			var steps = [] ;
        			steps.push(first);
        			for (var i in rest) {
        				if (rest[i][2] === null)
        					error("expected valid command after |");
        				steps.push(rest[i][2]);
        			}
        			return { 'pipeline' : steps };
        		},
        peg$c129 = "&&",
        peg$c130 = { type: "literal", value: "&&", description: "\"&&\"" },
        peg$c131 = function(first, rest) {
        			parser_debug("AndOrList, text = '" + text() + "'");
        			if (rest.length === 0)
        				return first;
        			if (first === null) /* have &&/|| but the first command is empty */
        				error("expected valid command before &&,||");

        			var and_or_list = [];
        			and_or_list.push(first);
        			for (var i in rest) {
        				and_or_list.push(rest[i][0]);
        				if (rest[i][1] === null)
        					error("expected valid command before &&,||");
        				and_or_list.push(rest[i][1]);
        			}

        			return { "and_or_list" : and_or_list };
        		},
        peg$c132 = "&",
        peg$c133 = { type: "literal", value: "&", description: "\"&\"" },
        peg$c134 = function(first, rest, last_op) {
        			parser_debug("List, text = '" + text() + "'");

        			/* Shortcut for specific case of a single command with ';' */
        			if (rest.length === 0 && ( last_op === null || last_op === ";" ))
        				return first;

        			var current_cmd = first ;
        			var steps = [] ;
        			for (var i in rest) {
        				var op = rest[i][0]; /* ';'or '&' */
        				var next_cmd = rest[i][1];

        				if (current_cmd === null)
        					error("expected valid command before ';','&'");
        				if ( op == ";" ) {
        					steps.push( { "foreground" : current_cmd } ) ;
        				} else {
        					steps.push( { "background" : current_cmd } ) ;
        				}

        				current_cmd = next_cmd;
        			}

        			/* The last step, if it isn't followed by ';' or '&' */
        			if (current_cmd !== null) {

        				if (last_op === null || last_op === ";" )
        					steps.push( { "foreground" : current_cmd } ) ;
        				else
        					steps.push( { "background" : current_cmd } ) ;
        			}

        			return { "list" : steps } ;
        		},
        peg$c135 = function(items) {
        			parser_debug("TerminatedList, text = '" + text() + "'");

        			var steps = [] ;
        			for (var i in items) {
        				var cmd = items[i][0];
        				var op = items[i][1]; /* ';'or '&' */

        				if ( op == ";" ) {
        					steps.push( { "foreground" : cmd } ) ;
        				} else {
        					steps.push( { "background" : cmd } ) ;
        				}
        			}
        			return { "list" : steps } ;
        		},
        peg$c136 = "$(",
        peg$c137 = { type: "literal", value: "$(", description: "\"$(\"" },
        peg$c138 = function() { return { "subshell" : null } ; },
        peg$c139 = function(term) { return { "subshell" : term } ; },
        peg$c140 = "`",
        peg$c141 = { type: "literal", value: "`", description: "\"`\"" },
        peg$c142 = function(terms) { return { "backtickshell" : terms } ; },
        peg$c143 = "${",
        peg$c144 = { type: "literal", value: "${", description: "\"${\"" },
        peg$c145 = function(varname) { return { "envvar" : varname } ; },
        peg$c146 = "$",
        peg$c147 = { type: "literal", value: "$", description: "\"$\"" },
        peg$c148 = "",
        peg$c149 = function(varname, varop, opvalue) { return { "envvar_operation" : { "envvar" : varname, "operation" : varop, "value": (opvalue?opvalue[0]:[]) } }; },
        peg$c150 = "${#",
        peg$c151 = { type: "literal", value: "${#", description: "\"${#\"" },
        peg$c152 = function(varname) { return { "envvar_operation" : { "envvar" : varname, "operation" : "strlen", "value" : null } }; },
        peg$c153 = /^[@*#?\-$!\0]/,
        peg$c154 = { type: "class", value: "[@*#?\\-$!\\0]", description: "[@*#?\\-$!\\0]" },
        peg$c155 = ":-",
        peg$c156 = { type: "literal", value: ":-", description: "\":-\"" },
        peg$c157 = ":=",
        peg$c158 = { type: "literal", value: ":=", description: "\":=\"" },
        peg$c159 = ":?",
        peg$c160 = { type: "literal", value: ":?", description: "\":?\"" },
        peg$c161 = "?",
        peg$c162 = { type: "literal", value: "?", description: "\"?\"" },
        peg$c163 = ":+",
        peg$c164 = { type: "literal", value: ":+", description: "\":+\"" },
        peg$c165 = "+",
        peg$c166 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c167 = "%%",
        peg$c168 = { type: "literal", value: "%%", description: "\"%%\"" },
        peg$c169 = "%",
        peg$c170 = { type: "literal", value: "%", description: "\"%\"" },
        peg$c171 = "##",
        peg$c172 = { type: "literal", value: "##", description: "\"##\"" },
        peg$c173 = "#",
        peg$c174 = { type: "literal", value: "#", description: "\"#\"" },
        peg$c175 = "$((",
        peg$c176 = { type: "literal", value: "$((", description: "\"$((\"" },
        peg$c177 = "))",
        peg$c178 = { type: "literal", value: "))", description: "\"))\"" },
        peg$c179 = function() { return { "arithmetic" : { literal : 0 } } ; },
        peg$c180 = function(expr) { return { "arithmetic" : expr } ; },
        peg$c181 = ":",
        peg$c182 = { type: "literal", value: ":", description: "\":\"" },
        peg$c183 = function(condition, rest) {
        		if (rest===null)
        			return condition;
        		return { "arithmetics_ternary_op" :
        			[ condition, rest[3], rest[7]] };
        	},
        peg$c184 = function(first, rest) { return arithmatic_binary_op(first,rest) ; },
        peg$c185 = "^",
        peg$c186 = { type: "literal", value: "^", description: "\"^\"" },
        peg$c187 = "==",
        peg$c188 = { type: "literal", value: "==", description: "\"==\"" },
        peg$c189 = "!=",
        peg$c190 = { type: "literal", value: "!=", description: "\"!=\"" },
        peg$c191 = "<=",
        peg$c192 = { type: "literal", value: "<=", description: "\"<=\"" },
        peg$c193 = ">=",
        peg$c194 = { type: "literal", value: ">=", description: "\">=\"" },
        peg$c195 = "*",
        peg$c196 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c197 = "/",
        peg$c198 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c199 = "~",
        peg$c200 = { type: "literal", value: "~", description: "\"~\"" },
        peg$c201 = function(op, term) {
        		if (op===null)
        			return term;
        		return { "arithmetic_unary_op_list" : [ op, term ] };
        	},
        peg$c202 = function(expr) { return expr ; },
        peg$c203 = function(value) { return { "literal" : value } ; },
        peg$c204 = function() { return { "envvar" : text() } ; },
        peg$c205 = /^[1-9]/,
        peg$c206 = { type: "class", value: "[1-9]", description: "[1-9]" },
        peg$c207 = function() { return parseInt(text(), 10); },
        peg$c208 = "0x",
        peg$c209 = { type: "literal", value: "0x", description: "\"0x\"" },
        peg$c210 = /^[A-Fa-f0-9]/,
        peg$c211 = { type: "class", value: "[A-Fa-f0-9]", description: "[A-Fa-f0-9]" },
        peg$c212 = function(hexvalue) { return parseInt(text(), 16); },
        peg$c213 = "0",
        peg$c214 = { type: "literal", value: "0", description: "\"0\"" },
        peg$c215 = /^[0-7]/,
        peg$c216 = { type: "class", value: "[0-7]", description: "[0-7]" },
        peg$c217 = function() { return parseInt(text(), 8); },
        peg$c218 = /^[ \t]/,
        peg$c219 = { type: "class", value: "[ \\t]", description: "[ \\t]" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0;

      s0 = peg$parseList();

      return s0;
    }

    function peg$parseFirstCommandWord() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 123) {
        s2 = peg$c2;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 125) {
          s2 = peg$c4;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c5); }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 33) {
            s2 = peg$c6;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c8) {
              s2 = peg$c8;
              peg$currPos += 2;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c9); }
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c10) {
                s2 = peg$c10;
                peg$currPos += 4;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c11); }
              }
              if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c12) {
                  s2 = peg$c12;
                  peg$currPos += 4;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c13); }
                }
                if (s2 === peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c14) {
                    s2 = peg$c14;
                    peg$currPos += 4;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c15); }
                  }
                  if (s2 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c16) {
                      s2 = peg$c16;
                      peg$currPos += 2;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c17); }
                    }
                    if (s2 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c18) {
                        s2 = peg$c18;
                        peg$currPos += 2;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c19); }
                      }
                      if (s2 === peg$FAILED) {
                        if (input.substr(peg$currPos, 4) === peg$c20) {
                          s2 = peg$c20;
                          peg$currPos += 4;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c21); }
                        }
                        if (s2 === peg$FAILED) {
                          if (input.substr(peg$currPos, 4) === peg$c22) {
                            s2 = peg$c22;
                            peg$currPos += 4;
                          } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c23); }
                          }
                          if (s2 === peg$FAILED) {
                            if (input.substr(peg$currPos, 4) === peg$c24) {
                              s2 = peg$c24;
                              peg$currPos += 4;
                            } else {
                              s2 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c25); }
                            }
                            if (s2 === peg$FAILED) {
                              if (input.substr(peg$currPos, 5) === peg$c26) {
                                s2 = peg$c26;
                                peg$currPos += 5;
                              } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c27); }
                              }
                              if (s2 === peg$FAILED) {
                                if (input.substr(peg$currPos, 5) === peg$c28) {
                                  s2 = peg$c28;
                                  peg$currPos += 5;
                                } else {
                                  s2 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c29); }
                                }
                                if (s2 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 3) === peg$c30) {
                                    s2 = peg$c30;
                                    peg$currPos += 3;
                                  } else {
                                    s2 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c31); }
                                  }
                                  if (s2 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 2) === peg$c32) {
                                      s2 = peg$c32;
                                      peg$currPos += 2;
                                    } else {
                                      s2 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c33); }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c1;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseToken_NoDelimiter();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c34(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseTokens_Command() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseFirstCommandWord();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseEmptyDelimiter();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseToken_NoDelimiter();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseEmptyDelimiter();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseToken_NoDelimiter();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c36(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseNon_Operator_UnquotedCharacters() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c37.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c38); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c37.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c38); }
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c39(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseToken_NoDelimiter() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseredirection_word_hack();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c1;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseNoDelimiter_UnquotedCharacters();
        if (s3 === peg$FAILED) {
          s3 = peg$parseAllContexts_Tokens();
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseNoDelimiter_UnquotedCharacters();
            if (s3 === peg$FAILED) {
              s3 = peg$parseAllContexts_Tokens();
            }
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c40(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseNoDelimiter_UnquotedCharacters() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c41.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c42); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c41.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c42); }
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c39(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseToken_NoBraces() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseNoBraces_UnquotedCharacters();
      if (s1 === peg$FAILED) {
        s1 = peg$parseAllContexts_Tokens();
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parseNoBraces_UnquotedCharacters();
          if (s1 === peg$FAILED) {
            s1 = peg$parseAllContexts_Tokens();
          }
        }
      } else {
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseNoBraces_UnquotedCharacters() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c43.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c44); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c43.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c44); }
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c39(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseNoDoubleQuotes_UnquotedCharacters() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c45.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c46); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c45.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c46); }
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c39(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseAllContexts_Tokens() {
      var s0;

      s0 = peg$parseSingleQuotedString();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDoubleQuotedString();
        if (s0 === peg$FAILED) {
          s0 = peg$parseEscapedCharacter();
          if (s0 === peg$FAILED) {
            s0 = peg$parseExpandable();
          }
        }
      }

      return s0;
    }

    function peg$parseredirection_word_hack() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c47.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c48); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c47.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c48); }
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        if (peg$c49.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c50); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSingleQuotedString() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c51;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c52); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseSingleQuotedStringCharacter();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSingleQuotedStringCharacter();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s3 = peg$c51;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c52); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c53(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSingleQuotedStringCharacter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 39) {
        s2 = peg$c51;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c52); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 92) {
          s2 = peg$c54;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c55); }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$parseLineTerminator();
        }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c1;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c56); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c57(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseEscapedCharacter();
      }

      return s0;
    }

    function peg$parseDoubleQuotedString() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c58;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c59); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseNoDoubleQuotes_UnquotedCharacters();
        if (s3 === peg$FAILED) {
          s3 = peg$parseEscapedCharacter();
          if (s3 === peg$FAILED) {
            s3 = peg$parseExpandable();
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseNoDoubleQuotes_UnquotedCharacters();
          if (s3 === peg$FAILED) {
            s3 = peg$parseEscapedCharacter();
            if (s3 === peg$FAILED) {
              s3 = peg$parseExpandable();
            }
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c58;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c59); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c60(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseEscapedCharacter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c54;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c55); }
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c56); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c61(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLineTerminator() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c62;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c63); }
      }

      return s0;
    }

    function peg$parseEmptyDelimiter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c64.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c65); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c64.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c65); }
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c66();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseVariableName() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (peg$c67.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c68); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c69.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c70); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c69.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c70); }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c71();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseRedirectionFileDescriptor() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c47.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c48); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c47.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c48); }
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c72();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseInputRedirection() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseRedirectionFileDescriptor();
      if (s1 === peg$FAILED) {
        s1 = peg$c73;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 60) {
          s2 = peg$c74;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c75); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsewhitespace();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseToken_NoDelimiter();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c76(s1, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseOutputRedirection() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseRedirectionFileDescriptor();
      if (s1 === peg$FAILED) {
        s1 = peg$c73;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 62) {
          s2 = peg$c77;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c78); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsewhitespace();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 124) {
              s4 = peg$c79;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c80); }
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c73;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseToken_NoDelimiter();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c81(s1, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseAppendRedirection() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseRedirectionFileDescriptor();
      if (s1 === peg$FAILED) {
        s1 = peg$c73;
      }
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c82) {
          s2 = peg$c82;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c83); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsewhitespace();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseToken_NoDelimiter();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c84(s1, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseHereDocRedirection() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseRedirectionFileDescriptor();
      if (s1 === peg$FAILED) {
        s1 = peg$c73;
      }
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c85) {
          s2 = peg$c85;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c86); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c87(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseFileDescriptorOrMinus() {
      var s0, s1;

      s0 = [];
      if (peg$c47.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c48); }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$c47.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c48); }
          }
        }
      } else {
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 45) {
          s1 = peg$c88;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c89); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c71();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseDupInputRedirection() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseRedirectionFileDescriptor();
      if (s1 === peg$FAILED) {
        s1 = peg$c73;
      }
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c90) {
          s2 = peg$c90;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c91); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFileDescriptorOrMinus();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c92(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseDupOutputRedirection() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseRedirectionFileDescriptor();
      if (s1 === peg$FAILED) {
        s1 = peg$c73;
      }
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c93) {
          s2 = peg$c93;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c94); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFileDescriptorOrMinus();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c95(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseInOutRedirection() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseRedirectionFileDescriptor();
      if (s1 === peg$FAILED) {
        s1 = peg$c73;
      }
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c96) {
          s2 = peg$c96;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c97); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsewhitespace();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseToken_NoDelimiter();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c98(s1, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseRedirection() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseInputRedirection();
      if (s1 === peg$FAILED) {
        s1 = peg$parseOutputRedirection();
        if (s1 === peg$FAILED) {
          s1 = peg$parseAppendRedirection();
          if (s1 === peg$FAILED) {
            s1 = peg$parseHereDocRedirection();
            if (s1 === peg$FAILED) {
              s1 = peg$parseDupInputRedirection();
              if (s1 === peg$FAILED) {
                s1 = peg$parseDupOutputRedirection();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseInOutRedirection();
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c99(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseAssignment() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseVariableName();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c100;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c101); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseToken_NoDelimiter();
          if (s3 === peg$FAILED) {
            s3 = peg$c73;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c102(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseAssignments_Or_Redirections() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseAssignment();
      if (s1 === peg$FAILED) {
        s1 = peg$parseRedirection();
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = [];
        s5 = peg$parseEmptyDelimiter();
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseEmptyDelimiter();
          }
        } else {
          s4 = peg$c0;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseAssignment();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = [];
          s5 = peg$parseEmptyDelimiter();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseEmptyDelimiter();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseRedirection();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = [];
          s5 = peg$parseEmptyDelimiter();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseEmptyDelimiter();
            }
          } else {
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseAssignment();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = [];
            s5 = peg$parseEmptyDelimiter();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseEmptyDelimiter();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRedirection();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c103(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseRedirections() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseRedirection();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = [];
        s5 = peg$parseEmptyDelimiter();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseEmptyDelimiter();
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseRedirection();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = [];
          s5 = peg$parseEmptyDelimiter();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseEmptyDelimiter();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseRedirection();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c104(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSimpleCommand() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseAssignments_Or_Redirections();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseEmptyDelimiter();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseEmptyDelimiter();
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTokens_Command();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseEmptyDelimiter();
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseEmptyDelimiter();
              }
            } else {
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRedirections();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c105(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseAssignments_Or_Redirections();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseEmptyDelimiter();
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseEmptyDelimiter();
            }
          } else {
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseTokens_Command();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c106(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseAssignments_Or_Redirections();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c107(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseTokens_Command();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parseEmptyDelimiter();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseEmptyDelimiter();
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parseRedirections();
                if (s3 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c108(s1, s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseTokens_Command();
              if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c109(s1);
              }
              s0 = s1;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseCompound_List() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseList();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c110(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCompound_Command_Subshell() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c111;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c112); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseEmptyDelimiter();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseEmptyDelimiter();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCompound_List();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseEmptyDelimiter();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseEmptyDelimiter();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c113;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c114); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c115(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseCompound_Command_Currentshell() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c2;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseEmptyDelimiter();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseEmptyDelimiter();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTerminatedList();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseEmptyDelimiter();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseEmptyDelimiter();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s5 = peg$c4;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c5); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c116(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseCommand() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseEmptyDelimiter();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseEmptyDelimiter();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSimpleCommand();
        if (s2 === peg$FAILED) {
          s2 = peg$parseCompound_Command_Subshell();
          if (s2 === peg$FAILED) {
            s2 = peg$parseCompound_Command_Currentshell();
            if (s2 === peg$FAILED) {
              s2 = peg$parseFor_clause();
              if (s2 === peg$FAILED) {
                s2 = peg$parseIf_clause();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseWhile_Until_Clause();
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseEmptyDelimiter();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseEmptyDelimiter();
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c117(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseWordlist() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseToken_NoDelimiter();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseEmptyDelimiter();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseToken_NoDelimiter();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseEmptyDelimiter();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseToken_NoDelimiter();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c118(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseDo_group() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c18) {
        s1 = peg$c18;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c19); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseEmptyDelimiter();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseEmptyDelimiter();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCompound_List();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseEmptyDelimiter();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseEmptyDelimiter();
            }
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c20) {
                s5 = peg$c20;
                peg$currPos += 4;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c21); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c110(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseFor_clause() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c30) {
        s1 = peg$c30;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c31); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseEmptyDelimiter();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseEmptyDelimiter();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseVariableName();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseEmptyDelimiter();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseEmptyDelimiter();
            }
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c32) {
                s5 = peg$c32;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c33); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseEmptyDelimiter();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseEmptyDelimiter();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseWordlist();
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parseEmptyDelimiter();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parseEmptyDelimiter();
                    }
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 59) {
                        s9 = peg$c119;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c120); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$parseEmptyDelimiter();
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parseEmptyDelimiter();
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseDo_group();
                          if (s11 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c121(s3, s7, s11);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseIf_clause() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c8) {
        s1 = peg$c8;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c9); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseEmptyDelimiter();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseEmptyDelimiter();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCompound_List();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseEmptyDelimiter();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseEmptyDelimiter();
            }
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c10) {
                s5 = peg$c10;
                peg$currPos += 4;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c11); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseEmptyDelimiter();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseEmptyDelimiter();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseCompound_List();
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parseEmptyDelimiter();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parseEmptyDelimiter();
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = [];
                      s10 = peg$parseElif_clause();
                      while (s10 !== peg$FAILED) {
                        s9.push(s10);
                        s10 = peg$parseElif_clause();
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseElse_clause();
                        if (s10 === peg$FAILED) {
                          s10 = peg$c73;
                        }
                        if (s10 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c16) {
                            s11 = peg$c16;
                            peg$currPos += 2;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c17); }
                          }
                          if (s11 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c122(s3, s7, s9, s10);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseElif_clause() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c14) {
        s1 = peg$c14;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c15); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseEmptyDelimiter();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseEmptyDelimiter();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCompound_List();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseEmptyDelimiter();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseEmptyDelimiter();
            }
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c10) {
                s5 = peg$c10;
                peg$currPos += 4;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c11); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseCompound_List();
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parseEmptyDelimiter();
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parseEmptyDelimiter();
                  }
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c123(s3, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseElse_clause() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c12) {
        s1 = peg$c12;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c13); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseEmptyDelimiter();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseEmptyDelimiter();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCompound_List();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseEmptyDelimiter();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseEmptyDelimiter();
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c124(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseWhile_Until_Clause() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c26) {
        s1 = peg$c26;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c27); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c28) {
          s1 = peg$c28;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c29); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseEmptyDelimiter();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseEmptyDelimiter();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCompound_List();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseEmptyDelimiter();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseEmptyDelimiter();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseDo_group();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c125(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsePipeline() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseCommand();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c126) {
          s5 = peg$c126;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c127); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c1;
        } else {
          peg$currPos = s4;
          s4 = peg$c0;
        }
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 124) {
            s5 = peg$c79;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c80); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseCommand();
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 2) === peg$c126) {
            s5 = peg$c126;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c127); }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c1;
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 124) {
              s5 = peg$c79;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c80); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseCommand();
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c128(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseAndOrList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsePipeline();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c129) {
          s4 = peg$c129;
          peg$currPos += 2;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c130); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c126) {
            s4 = peg$c126;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c127); }
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsePipeline();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c129) {
            s4 = peg$c129;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c130); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c126) {
              s4 = peg$c126;
              peg$currPos += 2;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c127); }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsePipeline();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c131(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseAndOrList();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 59) {
          s4 = peg$c119;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c120); }
        }
        if (s4 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 38) {
            s4 = peg$c132;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c133); }
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseAndOrList();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 59) {
            s4 = peg$c119;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c120); }
          }
          if (s4 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 38) {
              s4 = peg$c132;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c133); }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseAndOrList();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 59) {
            s3 = peg$c119;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c120); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 38) {
              s3 = peg$c132;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c133); }
            }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c73;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c134(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseTerminatedList() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parseAndOrList();
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 59) {
          s4 = peg$c119;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c120); }
        }
        if (s4 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 38) {
            s4 = peg$c132;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c133); }
          }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$parseAndOrList();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 59) {
              s4 = peg$c119;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c120); }
            }
            if (s4 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 38) {
                s4 = peg$c132;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c133); }
              }
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c135(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseExpandable() {
      var s0;

      s0 = peg$parseSubshellExpandable();
      if (s0 === peg$FAILED) {
        s0 = peg$parseBacktickExpandable();
        if (s0 === peg$FAILED) {
          s0 = peg$parseParameterExpandable();
          if (s0 === peg$FAILED) {
            s0 = peg$parseParameterOperationExpandable();
            if (s0 === peg$FAILED) {
              s0 = peg$parseArithmeticExpandable();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseSubshellExpandable() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c136) {
        s1 = peg$c136;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c137); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c111;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c112); }
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c1;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseEmptyDelimiter();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseEmptyDelimiter();
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s4 = peg$c113;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c114); }
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c138();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c136) {
          s1 = peg$c136;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c137); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c111;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c112); }
          }
          peg$silentFails--;
          if (s3 === peg$FAILED) {
            s2 = peg$c1;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseList();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s4 = peg$c113;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c114); }
              }
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c139(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseBacktickExpandable() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 96) {
        s1 = peg$c140;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c141); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseList();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 96) {
            s3 = peg$c140;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c141); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c142(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseParameterExpandable() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c143) {
        s1 = peg$c143;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c144); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseParameterName();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s3 = peg$c4;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c5); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c145(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 36) {
          s1 = peg$c146;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c147); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseParameterName();
          if (s2 !== peg$FAILED) {
            s3 = peg$c148;
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c145(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseParameterOperationExpandable() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c143) {
        s1 = peg$c143;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c144); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseParameterName();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseParameterExpansionOperator();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseToken_NoBraces();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseToken_NoBraces();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s5 = peg$c4;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c5); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c149(s2, s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c150) {
          s1 = peg$c150;
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c151); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseParameterName();
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s3 = peg$c4;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c5); }
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c152(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseParameterName() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$c67.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c68); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c69.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c70); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$c69.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c70); }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 === peg$FAILED) {
        if (peg$c153.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c154); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c71();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseParameterExpansionOperator() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c155) {
        s1 = peg$c155;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c156); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s1 = peg$c88;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c89); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c157) {
            s1 = peg$c157;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c158); }
          }
          if (s1 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s1 = peg$c100;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c101); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c159) {
                s1 = peg$c159;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c160); }
              }
              if (s1 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 63) {
                  s1 = peg$c161;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c162); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c163) {
                    s1 = peg$c163;
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c164); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 43) {
                      s1 = peg$c165;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c166); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c167) {
                        s1 = peg$c167;
                        peg$currPos += 2;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c168); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 37) {
                          s1 = peg$c169;
                          peg$currPos++;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c170); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c171) {
                            s1 = peg$c171;
                            peg$currPos += 2;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c172); }
                          }
                          if (s1 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 35) {
                              s1 = peg$c173;
                              peg$currPos++;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c174); }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c71();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseArithmeticExpandable() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c175) {
        s1 = peg$c175;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c176); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsewhitespace();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c177) {
            s3 = peg$c177;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c178); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c179();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c175) {
          s1 = peg$c175;
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c176); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsewhitespace();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseConditionalOpTerm();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsewhitespace();
              if (s4 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c177) {
                  s5 = peg$c177;
                  peg$currPos += 2;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c178); }
                }
                if (s5 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c180(s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseConditionalOpTerm() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseLogicalOrTerm();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsewhitespace();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 63) {
            s4 = peg$c161;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c162); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsewhitespace();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseLogicalOrTerm();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsewhitespace();
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s8 = peg$c181;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c182); }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsewhitespace();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseLogicalOrTerm();
                      if (s10 !== peg$FAILED) {
                        s3 = [s3, s4, s5, s6, s7, s8, s9, s10];
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c73;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c183(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLogicalOrTerm() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseLogicalAndTerm();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsewhitespace();
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c126) {
            s5 = peg$c126;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c127); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewhitespace();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseLogicalAndTerm();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsewhitespace();
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c126) {
              s5 = peg$c126;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c127); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsewhitespace();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseLogicalAndTerm();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c184(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLogicalAndTerm() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseBitwiseOrTerm();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsewhitespace();
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c129) {
            s5 = peg$c129;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c130); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewhitespace();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseBitwiseOrTerm();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsewhitespace();
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c129) {
              s5 = peg$c129;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c130); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsewhitespace();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseBitwiseOrTerm();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c184(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseBitwiseOrTerm() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseBitwiseXorTerm();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsewhitespace();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 124) {
            s5 = peg$c79;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c80); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewhitespace();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseBitwiseXorTerm();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsewhitespace();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 124) {
              s5 = peg$c79;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c80); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsewhitespace();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseBitwiseXorTerm();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c184(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseBitwiseXorTerm() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseBitwiseAndTerm();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsewhitespace();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 94) {
            s5 = peg$c185;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c186); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewhitespace();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseBitwiseAndTerm();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsewhitespace();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 94) {
              s5 = peg$c185;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c186); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsewhitespace();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseBitwiseAndTerm();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c184(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseBitwiseAndTerm() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseEqualityOpTerm();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsewhitespace();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 38) {
            s5 = peg$c132;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c133); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewhitespace();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseEqualityOpTerm();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsewhitespace();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 38) {
              s5 = peg$c132;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c133); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsewhitespace();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseEqualityOpTerm();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c184(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseEqualityOpTerm() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseRelationalOpTerm();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsewhitespace();
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c187) {
            s5 = peg$c187;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c188); }
          }
          if (s5 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c189) {
              s5 = peg$c189;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c190); }
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewhitespace();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseRelationalOpTerm();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsewhitespace();
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c187) {
              s5 = peg$c187;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c188); }
            }
            if (s5 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c189) {
                s5 = peg$c189;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c190); }
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsewhitespace();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseRelationalOpTerm();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c184(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseRelationalOpTerm() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseBitwiseShiftTerm();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsewhitespace();
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c191) {
            s5 = peg$c191;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c192); }
          }
          if (s5 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c193) {
              s5 = peg$c193;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c194); }
            }
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 62) {
                s5 = peg$c77;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c78); }
              }
              if (s5 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 60) {
                  s5 = peg$c74;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c75); }
                }
              }
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewhitespace();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseBitwiseShiftTerm();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsewhitespace();
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c191) {
              s5 = peg$c191;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c192); }
            }
            if (s5 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c193) {
                s5 = peg$c193;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c194); }
              }
              if (s5 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 62) {
                  s5 = peg$c77;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c78); }
                }
                if (s5 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 60) {
                    s5 = peg$c74;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c75); }
                  }
                }
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsewhitespace();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseBitwiseShiftTerm();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c184(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseBitwiseShiftTerm() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseAdditiveTerm();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsewhitespace();
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c82) {
            s5 = peg$c82;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c83); }
          }
          if (s5 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c85) {
              s5 = peg$c85;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c86); }
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewhitespace();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseAdditiveTerm();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsewhitespace();
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c82) {
              s5 = peg$c82;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c83); }
            }
            if (s5 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c85) {
                s5 = peg$c85;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c86); }
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsewhitespace();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseAdditiveTerm();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c184(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseAdditiveTerm() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseTerm();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsewhitespace();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 43) {
            s5 = peg$c165;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c166); }
          }
          if (s5 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s5 = peg$c88;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c89); }
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewhitespace();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseTerm();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsewhitespace();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 43) {
              s5 = peg$c165;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c166); }
            }
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s5 = peg$c88;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c89); }
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsewhitespace();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseTerm();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c184(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseTerm() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseUnaryOpTerm();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsewhitespace();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 42) {
            s5 = peg$c195;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c196); }
          }
          if (s5 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s5 = peg$c197;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c198); }
            }
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 37) {
                s5 = peg$c169;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c170); }
              }
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewhitespace();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseUnaryOpTerm();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsewhitespace();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 42) {
              s5 = peg$c195;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c196); }
            }
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 47) {
                s5 = peg$c197;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c198); }
              }
              if (s5 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 37) {
                  s5 = peg$c169;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c170); }
                }
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsewhitespace();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseUnaryOpTerm();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c184(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseUnaryOpTerm() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 33) {
        s1 = peg$c6;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 126) {
          s1 = peg$c199;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c200); }
        }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c73;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsewhitespace();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFactor();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c201(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseFactor() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c111;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c112); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsewhitespace();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseConditionalOpTerm();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsewhitespace();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c113;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c114); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c202(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseInteger();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c203(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseArithmeticParameterName();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c204();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$parseExpandable();
          }
        }
      }

      return s0;
    }

    function peg$parseInteger() {
      var s0;

      s0 = peg$parseDecimalInteger();
      if (s0 === peg$FAILED) {
        s0 = peg$parseHexInteger();
        if (s0 === peg$FAILED) {
          s0 = peg$parseOctalInteger();
        }
      }

      return s0;
    }

    function peg$parseDecimalInteger() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (peg$c205.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c206); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c47.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c48); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c47.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c48); }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c207();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseHexInteger() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c208) {
        s1 = peg$c208;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c209); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c210.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c211); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c210.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c211); }
            }
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c212(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseOctalInteger() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 48) {
        s1 = peg$c213;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c214); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c215.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c216); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c215.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c216); }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c217();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseArithmeticParameterName() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (peg$c67.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c68); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c69.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c70); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c69.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c70); }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c71();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsewhitespace() {
      var s0, s1;

      s0 = [];
      if (peg$c218.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c219); }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c218.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c219); }
        }
      }

      return s0;
    }



    /* This file is part of UNIX Guide for the Perplexed project.
       Copyright (C) 2014 by Assaf Gordon <assafgordon@gmail.com>
       Released under GPLv3 or later, with the following addition:

         As additional permission under GNU GPL version 3 section 7, you
         may distribute non-source (e.g., minimized or compacted) forms of
         that code without the copy of the GNU GPL normally required by
         section 4, provided you include this license notice and a URL
         through which recipients can access the Corresponding Source.

       See: https://www.gnu.org/philosophy/javascript-trap.html

       This file was auto-generated from 'posix_shell.pegjs'
       using PEGJS ( http://pegjs.majda.cz/ ).
    */

    function parser_debug()
    {
    	if (0) {
    		var text = "" ;
    		for (var i in arguments) {
    			text += arguments[i] + " " ;
    		}
    		console.warn(text);
    	}
    }

    function pack_simple_command(prefix,cmd,suffix)
    {
    /*			parser_debug("SimpleCommand, text = '" + text() + "' offset = " + offset() );
    */
    			/* Combine redirection from BEFORE and AFTER the command,
    			   and store assignments and redirection in seperate arrays */
    			var assignments = [] ;
    			var redirections = [] ;

    			for (i in prefix) {
    				if (prefix[i]) {
    					var tmp = prefix[i];
    					if ( "assignment" in tmp ) {
    						assignments.push(tmp["assignment"]);
    					} else if ( "redirection" in tmp ) {
    						redirections.push(tmp["redirection"]);
    					}
    				}
    			}
    			for (i in suffix) {
    				if (suffix[i]) {
    					var tmp = suffix[i];
    					if ( "assignment" in tmp ) {
    						assignments.push(tmp["assignment"]);
    					} else if ( "redirection" in tmp ) {
    						redirections.push(tmp["redirection"]);
    					}
    				}
    			}

    			var command = {} ;

    			if (assignments.length > 0)
    				command["assignments"] = assignments ;
    			if (redirections.length > 0)
    				command["redirections"] = redirections ;

    			if (cmd)
    				command["command"] = cmd ;

    			return { "SimpleCommand" : command } ;
    		}

    function arithmatic_binary_op(first,rest)
    {
    	if (rest.length===0)
    		return first;

    	var list=[];
    	list.push(first);
    	for (var i in rest) {
    		list.push( rest[i][1] ); // the operator
    		list.push( rest[i][3] ); // the value
    	}
    	return { "arithmetics_binary_op_list" : list } ;
    }



    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
