/*
   This file is part of UNIX Guide for the Perplexed project.
   Copyright (C) 2014 by Assaf Gordon <assafgordon@gmail.com>
   Released under GPLv3 or later, with the following addition:

     As additional permission under GNU GPL version 3 section 7, you
     may distribute non-source (e.g., minimized or compacted) forms of
     that code without the copy of the GNU GPL normally required by
     section 4, provided you include this license notice and a URL
     through which recipients can access the Corresponding Source.

   See: https://www.gnu.org/philosophy/javascript-trap.html
*/

/*
Input/Output Stream classes.

NOTE:
In this emulation environment, all input/output
is done with lines (akin to line-buffered).


NOTE:
GenericStream implements a FIFO collection of lines of text.
The semantics of "GenericStream" are:
	push - add lines.
	shift - remove and return lines.
	get - reteive all lines, clear lines.
	set - set all lines, override previous content.

Inherited classes use slightly diffent semantics:
	put - add line
	get - retrive line (and remove it from buffer).
*/

function GenericStream() {
	this.name = "GenericStream";
	this.lines = [ ];
	this.fill_input_callback = null;
}

GenericStream.prototype.__clear_lines = function() {
	this.lines = [] ;
}

/* adds one line to the end of the stream */
GenericStream.prototype.__push_line = function(text) {
	VerifyString(text);
	this.lines.push(text);
}

/* adds multiple lines to the end of the stream */
GenericStream.prototype.__push_lines = function(arr) {
	VerifyArray(arr);
	for (var i in arr) {
		GenericStream.prototype.__push_line.call(this,arr[i]);
	}
}

/* set the content of 'lines', clearing any previous content */
GenericStream.prototype.__set_lines = function(arr) {
	this.__clear_lines();
	this.__push_lines(arr);
}

GenericStream.prototype.__fill_input = function() {
	if ( this.lines.length === 0
	     &&
	     this.fill_input_callback !== null) {
		this.lines = this.fill_input_callback() ;
	}
}

/* returns TRUE if the buffer is empty (no more lines) */
GenericStream.prototype.__is_empty = function() {
	this.__fill_input();
	return (this.lines.length === 0);
}

/* returns the next line in the input, or NULL if no more lines. */
GenericStream.prototype.__shift_line = function() {
	this.__fill_input();
	if (this.lines.length>0)
		return this.lines.shift();
	return null;
}

/* returns the content of 'lines', then CLEARING it */
GenericStream.prototype.__get_lines = function() {
	this.__fill_input();
	var temp = this.lines;
	this.lines = [];
	return temp;
}

function InputStream() {
	this.name = "InputStream";
	this.lines = [] ;
	this.fill_input_callback = null ;
}
InputStream.prototype = new GenericStream();
// Expose public functions, from GenericStream's internal functions
InputStream.prototype.constructor = InputStream;
InputStream.prototype.get_line = InputStream.prototype.__shift_line;
InputStream.prototype.is_empty = InputStream.prototype.__is_empty;
InputStream.prototype.get_all_lines = InputStream.prototype.__get_lines;


function OutputStream() {
	this.name = "OutputStream";
	this.lines = [] ;
}
OutputStream.prototype = new GenericStream();
// Expose public functions, from GenericStream's internal functions
OutputStream.prototype.constructor = OutputStream;
OutputStream.prototype.put_line = OutputStream.prototype.__push_line;
OutputStream.prototype.put_lines = OutputStream.prototype.__push_lines;

module.exports = {
	"GenericStream" : GenericStream,
	"InputStream"   : InputStream,
	"OutputStream"  : OutputStream
	}
