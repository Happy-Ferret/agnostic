/*
   This file is part of UNIX Guide for the Perplexed project.
   Copyright (C) 2014 by Assaf Gordon <assafgordon@gmail.com>
   Released under GPLv3 or later, with the following addition:

     As additional permission under GNU GPL version 3 section 7, you
     may distribute non-source (e.g., minimized or compacted) forms of
     that code without the copy of the GNU GPL normally required by
     section 4, provided you include this license notice and a URL
     through which recipients can access the Corresponding Source.

   See: https://www.gnu.org/philosophy/javascript-trap.html
*/

/*
File/Directory Access Classes.

NOTE:
In this emulation environment, file-access is limited to
Object-Storage-type access:
  1. read (entire) content
  2. write (entire) content
  3. append content to end of current content
  4. truncate file (reset content)
  5. No random access.
  6. All operations are LINED based.
  7. Access mode (r/w/x) is supported, but never checked
  8. Owner/Groud is supported, but never checked


StorageObject - can be considerd an emulation of INode information.

*/
require("utils/time_utils");

function StorageObject() {
	this.name = "StorageObject"; //class-name, javascript-related
	this.mode = 0666;
	this.uid  = 1000; // ID of owner
	this.gid  = 1000; // GroupID of owner
	var t = get_sys_time();
	this.access_time = t;
	this.change_time = t;
	this.modify_time = t;

	// The sub-class is responsible to update this value.
	this.size = -1 ;

	// The sub-class is responsible to updat this value: "File" or "Dir"
	// In a real operating system, this is part of "mode" (c.f. IS_REG/IS_DIR)
	this.object_type = null;
}

/* Internel helper function */
StorageObject.prototype.__get_os_time = function() {
	var t = get_sys_time();
	return t;
}
StorageObject.prototype.__update_ctime = function() {
	var t = StorageObject.prototype.__get_os_time.call(this);
	this.change_time = t ;
}
StorageObject.prototype.__update_atime = function() {
	var t = StorageObject.prototype.__get_os_time.call(this);
	this.access_time = t ;
}
StorageObject.prototype.__update_mtime = function() {
	var t = StorageObject.prototype.__get_os_time.call(this);
	this.modify_time = t ;
}

/* Akin to stat(2) */
StorageObject.prototype.stat = function() {
	return {
		"uid" : this.uid,
		"gid" : this.gid,
		"mode": this.mode,
		"atime": this.access_time,
		"ctime": this.change_time,
		"mtime": this.modify_time,
		"size" : this.size,
		"object_type" : this.object_type,
		};
}

/* like chwon(2)
TODO: respect current owner and owner of calling process
*/
StorageObject.prototype.chown = function(new_uid,new_gid) {
	VerifyInteger(new_uid);
	VerifyInteger(new_gid);
	this.uid = new_uid;
	this.gid = new_gid;

	//Update CTIME
	StorageObject.prototype.__update_ctime.call(this);
}

/* like chmod(2)
TODO: respect current owner and owner of calling process
*/
StorageObject.prototype.chmod = function(new_mode) {
	VerifyInteger(new_mode);
	this.mode = new_mode;

	//Update CTIME
	StorageObject.prototype.__update_ctime.call(this);
}

/* like utime(2)
TODO: respect current owner and owner of calling process
*/
StorageObject.prototype.utime = function(new_atime, new_mtime) {
	VerifyInteger(new_atime);
	VerifyInteger(new_mtime);
	this.access_time = new_atime;
	this.modify_time = new_mtime;

	//Update CTIME
	StorageObject.prototype.__update_ctime.call(this);
}


/*****************************************************
 * File Storage Object
*****************************************************/
function FileObject() {
	this.name = "FileObject"; //class-name, javascript-related
	this.object_type = "file" ;
	this.lines = [] ;
	this.size = 0 ;
}
FileObject.prototype = new StorageObject();
FileObject.prototype.get_all_lines = function() {
	StorageObject.prototype.__update_atime.call(this);
	return this.lines ;
}
FileObject.prototype.write = function(arr) {
	FileObject.prototype.truncate.call(this);
	FileObject.prototype.append.call(this,arr);
}
FileObject.prototype.truncate = function() {
	StorageObject.prototype.__update_atime.call(this);
	StorageObject.prototype.__update_mtime.call(this);
	this.lines = [];
	this.size = 0 ;
}
FileObject.prototype.append = function(arr) {
	StorageObject.prototype.__update_atime.call(this);
	StorageObject.prototype.__update_mtime.call(this);
	VerifyArray(arr);

	var count_chars = 0 ;
	for (var i in arr) {
		var line = arr[i];
		VerifyString(line);
		this.lines.push(line);
		count_chars += line.length + 1 ; //UGLY Hack: add one for a newline (which we don't store)
	}
	this.size += count_chars;
}


/*****************************************************
  Directory Storage Object - does nothing more than storing INode information
*****************************************************/
function DirectoryObject() {
	this.name = "DirectoryObject"; //class-name, javascript-related
	this.object_type = "directory" ;
	this.size = 0 ;
}
DirectoryObject.prototype = new StorageObject();

module.exports = {
	"StorageObject" : StorageObject,
	"File" : FileObject,
	"Directory" : DirectoryObject
	};


