/*
   This file is part of UNIX Guide for the Perplexed project.
   Copyright (C) 2014 by Assaf Gordon <assafgordon@gmail.com>
   Released under GPLv3 or later, with the following addition:

     As additional permission under GNU GPL version 3 section 7, you
     may distribute non-source (e.g., minimized or compacted) forms of
     that code without the copy of the GNU GPL normally required by
     section 4, provided you include this license notice and a URL
     through which recipients can access the Corresponding Source.

   See: https://www.gnu.org/philosophy/javascript-trap.html
*/

/*
Process State Encapsulation.

This module contains functions which could be consdered as
kernel system-calls which return Per-Process information.
*/
"use strict";

module.exports = ProcessState;

var OperatingSystem = require('os/os_state');
var FileSystem = require('os/filesystem');
var Streams = require('os/streams');
var ob_utils = require("utils/object_utils");
var path_utils = require("utils/path_utils");


function ProcessState(OS,FS) {

	if (! (OS instanceof OperatingSystem) )
		throw new TypeError("OS parameter is not an OperatingSystem");

	if (! (FS instanceof FileSystem) )
		throw new TypeError("FS parameter is not a FileSystem");

	this.OS = OS;
	this.FS = FS;

	/* Current and Parent Process ID */
	this.pid = OS.allocate_pid() ;
	this.ppid = 1 ; // default Parent PID is 1

	/* Current Working Directory */
	this.cwd = "/" ;

	/* Environment Variables */
	this.env = {} ;

	this.stdin = new Streams.InputStream();
	this.stdout = new Streams.OutputStream();
	this.stderr = new Streams.OutputStream();

	this.last_exit_code = null ; // exit code of last process
}

ProcessState.prototype.getOS = function()
{
	return this.OS;
}

ProcessState.prototype.getFS = function()
{
	return this.FS;
}

/*
Clones the current ProcessState and returns a new ProcessState.
NOTE:
Major different from 'posix' fork/clone is that STDIN/STDERR/STDOUT
are NOT cloned, but are initialized to new empty streams.
It is the caller's responsibility to take care of STDIN/STDOUT/STDERR
assignment (e.g. piping/redirections).
*/
ProcessState.prototype.clone = function()
{
	var new_ps = new ProcessState(this.OS,this.FS);
	new_ps.ppid = this.pid;
	new_ps.pid =  this.OS.allocate_pid();
	new_ps.cwd =  this.cwd;
	new_ps.env = {};
	for (var i in this.env) {
		new_ps.env[i] = this.env[i];
	}
	return new_ps;
}


ProcessState.prototype.getpid = function()
{
	return this.pid ;
}
ProcessState.prototype.getppid = function()
{
	return this.ppid ;
}

ProcessState.prototype.getcwd = function()
{
	return this.cwd;
}

ProcessState.prototype.chdir = function(path)
{
	ob_utils.VerifyString(path);
	var newcwd;

	//TODO: Verify valid path on the filesystem
	if (path_utils.isAbsolute(path))
		newcwd = path_utils.canonicalize(path);
	else
		newcwd = path_utils.canonicalize(this.cwd + "/" + path);

	this.cwd = newcwd;
}

/* setenv(3) */
ProcessState.prototype.setenv = function (name,value,overwrite)
{
	ob_utils.VerifyString(name);
	ob_utils.VerifyString(value);
	ob_utils.VerifyBoolean(overwrite);

	if ( !this.existsenv(name) || overwrite )
		this.env[name] = value;

	return 0;
}
ProcessState.prototype.unsetenv = function (name)
{
	if ( name in this.env )
		delete this.env[name];

	return 0;
}
/* Unlike a real OS, access to ENV is encapsulated. */
/* existsenv() - returns TRUE of FALSE, if the key exists in the environment */
ProcessState.prototype.existsenv = function (name)
{
	ob_utils.VerifyString(name);
	return ( name in this.env ) ;
}
/* getenv() - returns the value of key 'NAME' in the environment,
		or the value of 'def' if 'NAME' doesn't exist */
ProcessState.prototype.getenv = function (name,def)
{
	ob_utils.VerifyString(name);
	ob_utils.VerifyString(def);
	if ( this.existsenv(name) )
		return this.env[name];
	return def;
}
/* environ returns a COPY of the environment hash -
   so processes can iterate it but not change it directly */
ProcessState.prototype.environ = function ()
{
	var tmp = {} ;
	for (var key in this.env) {
		tmp[key] = this.env[key];
	}
	return tmp;
}

ProcessState.prototype.clearenv = function ()
{
	this.env = {} ;
}

