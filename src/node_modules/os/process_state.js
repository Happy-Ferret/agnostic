/*
   This file is part of UNIX Guide for the Perplexed project.
   Copyright (C) 2014 by Assaf Gordon <assafgordon@gmail.com>
   Released under GPLv3 or later, with the following addition:

     As additional permission under GNU GPL version 3 section 7, you
     may distribute non-source (e.g., minimized or compacted) forms of
     that code without the copy of the GNU GPL normally required by
     section 4, provided you include this license notice and a URL
     through which recipients can access the Corresponding Source.

   See: https://www.gnu.org/philosophy/javascript-trap.html
*/

/*
Process State Encapsulation.

This module contains functions which could be consdered as
kernel system-calls which return Per-Process information.
*/

ProcessState = (function() {

	/* TODO: this is nodeJS specific module, will not work in the browser.
		 find a replacement, or re-implement. */
	var path = require("path");
	var resolve_path = path.resolve;

	/* Current and Parent Process ID */
	var pid = 123 ;
	var ppid = 1 ;
	function getpid() { return pid ; }
	function getppid() { return ppid ; }

	/* Current Working Directory */
	var cwd = "/tmp" ;

	function getcwd() { return cwd; }
	function chdir(path)
	{
		VerifyString(path);
		//TODO: Verify valid path
		cwd = resolve_path(cwd,path);
	}

	/* Environment Variables */
	var env = {} ;

	/* setenv(3) */
	function setenv(name,value,overwrite)
	{
		VerifyString(name);
		VerifyString(value);
		VerifyBoolean(overwrite);

		if ( !(name in env) || overwrite )
			env[name] = value;

		return 0;
	}
	function unsetenv(name)
	{
		if ( name in env )
			delete env[name];

		return 0;
	}
	/* Unlike a real OS, access to ENV is encapsulated. */
	/* existsenv() - returns TRUE of FALSE, if the key exists in the environment */
	function existsenv(name)
	{
		VerifyString(name);
		return ( name in env ) ;
	}
	/* getenv() - returns the value of key 'NAME' in the environment,
			or the value of 'def' if 'NAME' doesn't exist */
	function getenv(name,def)
	{
		VerifyString(name);
		VerifyString(def);
		if ( existsenv(name) )
			return env[name];
		return def;
	}
	/* environ returns a COPY of the environment hash -
	   so processes can iterate it but not change it directly */
	function environ()
	{
		var tmp = {} ;
		for (var key in env) {
			tmp[key] = env[key];
		}
		return tmp;
	}
	function clearenv()
	{
		env = {} ;
	}

	return {
		"getpid"  : getpid,
		"getppid" : getppid,

		"getcwd" : getcwd,
		"chdir" : chdir,

		"setenv"   : setenv,
		"unsetenv" : unsetenv,
		"existsenv": existsenv,
		"getenv"   : getenv,
		"environ"  : environ,
		"clearenv" : clearenv
	};
})();

