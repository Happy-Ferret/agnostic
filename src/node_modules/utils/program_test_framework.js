/****************************************
 * This file is part of UNIX Guide for the Perplexed project.
 * Copyright (C) 2014 by Assaf Gordon <assafgordon@gmail.com>
 * Released under GPLv3 or later.
 ****************************************/

/*
This module provides a testing framework for programs.
*/

var assert = require('assert');
require('utils/object_utils');
require('utils/time_utils');
OperatingSystem = require('os/os_state');
FileSystem = require('os/filesystem');
Streams = require('os/streams');
ProcessState = require('os/process_state');
ProgramBase = require('programs/program_base');

var os = new OperatingSystem.OperatingSystem();

function run_program(prog_name, program_constructor, stdin_lines,params, filesystem)
{
	var ps = new ProcessState.ProcessState(os,filesystem);
	ps.stdin = new Streams.InputStream();
	ps.stdin.__set_lines(stdin_lines);
	ps.stdout = new Streams.OutputStream();
	ps.stderr = new Streams.OutputStream();

	var s = new program_constructor();
	params.unshift(prog_name);
	var exit_code = s.run(ps,params);
	var stdout = ps.stdout.__get_lines();
	var stderr = ps.stderr.__get_lines();

	var result = { "exit_code" : exit_code } ;
	if (stdout.length>0)
		result["stdout"] = stdout;
	if (stderr.length>0)
		result["stderr"] = stderr;

	return result;
}


function validate_program_tests(tests)
{
	var seen_tests = {} ;
	var current_test_name = "(unknown)" ;

	try {
		for(var t in tests) {
			var test = tests[t];

			if (! "name" in tests)
				throw "Found test without a name";

			var name   = test.name ;
			current_test_name = name;

			if (name in seen_tests)
				throw "duplicated test name";
			seen_tests[name] = 1 ;

			if ("argv" in test) {
				if (!IsArray(test.argv))
					throw "argv is not an array";
				for (var i in test.argv) {
					if (!IsString(test.argv[i]))
						throw "argv[" +i+ "] is not a string" ;
				}
			}

			if ("exit_code" in test) {
				if (!IsInteger(test.exit_code))
					throw "exit_code is not an integer";
			}

			if ("stdin" in test) {
				if (!IsString(test.stdin))
					throw "stdin is not a string";
			}

			if ("stdout" in test) {
				if (!IsString(test.stdout))
					throw "stdout is not a string";
			}

			if ("stderr" in test) {
				if (!IsString(test.stderr))
					throw "stderr is not a string";
			}
		}
	} catch (e) {
		console.error("Test framework error: test " + current_test_name + " : " + e);
		process.exit(1);
	}
}

run_program_tests = function(prog_name, program_constructor, tests, filesystem)
{
	validate_program_tests(tests);

	for(var t in tests) {
		var test = tests[t];
		var name   = test.name ;
		var argv   = [];
		var stdin_lines = [];
		var expected = { exit_code: 0 } ;
		if ("argv" in test)
			argv = test.argv;
		if ("stdin" in test) {
			//remove last newline (if any), to avoid extranous empty last line
			var tmp = test.stdin.replace(/\n$/,"");
			stdin_lines = tmp.split("\n");
		}
		if ("exit_code" in test)
			expected.exit_code = test.exit_code;
		if ("stdout" in test) {
			//remove last newline (if any), to avoid extranous empty last line
			var tmp = test.stdout.replace(/\n$/,"");
			expected["stdout"] = tmp.split("\n");
		}
		if ("stderr" in test) {
			//remove last newline (if any), to avoid extranous empty last line
			var tmp = test.stderr.replace(/\n$/,"");
			expected["stderr"] = tmp.split("\n");
		}

		try {
			var result = run_program(prog_name, program_constructor,stdin_lines, argv, filesystem);
			assert.deepEqual( result, expected );
			console.log(name + " OK");
		} catch (e) {
			console.log(name + " FAILED");
			throw e;
		}
	}
}
