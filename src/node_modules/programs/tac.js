/*
   This file is part of UNIX Guide for the Perplexed project.
   Copyright (C) 2014 by Assaf Gordon <assafgordon@gmail.com>
   Released under GPLv3 or later, with the following addition:

     As additional permission under GNU GPL version 3 section 7, you
     may distribute non-source (e.g., minimized or compacted) forms of
     that code without the copy of the GNU GPL normally required by
     section 4, provided you include this license notice and a URL
     through which recipients can access the Corresponding Source.

   See: https://www.gnu.org/philosophy/javascript-trap.html

   POSIX Shell Command Language Standard:
   http://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html
*/

/*
A Naive implementation of tac(1)
*/
"use strict";

var PosixGetOpt = require('utils/posix-getopt');
var ProgramBase = require('programs/program_base');
var Filesystem = require('os/filesystem');

module.exports = ProgramTac;

function ProgramTac() {
	this.name = "ProgramTac";
	this.program_name = "tac";
	this.files = [] ; //input file names
}
ProgramTac.prototype = new ProgramBase();
ProgramTac.prototype.constructor = ProgramTac;

ProgramTac.prototype.parse_command_line=function() {
	var parser = new PosixGetOpt(':b(before)r(regex)s:(separator)\u1000(help)\u1001(version)', this.argv);

	var option;
	while ((option = parser.getopt()) !== undefined) {
		switch (option.option) {
			case 'b':
				this.error_not_implemented_feature("-b/--before","not implemented in Agnostic");
				break;

			case 'r':
				this.error_not_implemented_feature("-r/--regex","not implemented in Agnostic");
				break;

			case 's':
				this.error_not_implemented_feature("-s/--separator","not implemented in Agnostic");
				break;

			case '\u1000':
				this.show_help();
				this.exit(0);

			case '\u1001':
				this.show_version();
				this.exit(0);

			default:
				this.error_invalid_argument(option.errmsg);
		}
	}

	// Get first/increment/last parameters
	var args = this.argv.slice(parser.optind());
	// If no files are given, process "stdin"
	if (args.length === 0)
		args.push("-");
	this.files = args ;
}


ProgramTac.prototype.tac_content=function(files,content) {
	if (content.length === 0)
		return ;

	content.reverse();
	this.runtime.stdout.put_lines(content);
}

ProgramTac.prototype.internal_run=function() {
	this.parse_command_line();

	this.process_files ( this.files, this.tac_content ) ;

	return 0;
}
