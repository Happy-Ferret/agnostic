/*
   This file is part of UNIX Guide for the Perplexed project.
   Copyright (C) 2014 by Assaf Gordon <assafgordon@gmail.com>
   Released under GPLv3 or later, with the following addition:

     As additional permission under GNU GPL version 3 section 7, you
     may distribute non-source (e.g., minimized or compacted) forms of
     that code without the copy of the GNU GPL normally required by
     section 4, provided you include this license notice and a URL
     through which recipients can access the Corresponding Source.

   See: https://www.gnu.org/philosophy/javascript-trap.html

   POSIX Shell Command Language Standard:
   http://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html
*/

/*
A partial implementation of cal(1)
http://pubs.opengroup.org/onlinepubs/009604599/utilities/cal.html

NOTE:
This implementation support dates > 01-01-1970 .
*/
"use strict";

var sprintf = require('utils/sprintf');
var ob_utils = require('utils/object_utils');
var strftime = require('utils/strftime');
var PosixGetOpt = require('utils/posix-getopt');
var ProgramBase = require('programs/program_base');

module.exports = ProgramCal;

function ProgramCal() {
	this.name = "ProgramCal";
	this.program_name = "cal";
	// Default output format
	this.month = null;
	this.year = null;
	this.display_one_month = true;
	this.week_starts_on_monday = true;
}

ProgramCal.prototype = new ProgramBase();
ProgramCal.prototype.constructor = ProgramCal;

ProgramCal.prototype.get_month_value=function(month_param) {
	var month_val = false;

	if (ob_utils.IsStrictDecimalIntegerValue(month_param)) {
		month_val = parseInt(month_param);
		if (month_val>=1 && month_val<=12)
			return month_val;
		return false;
	}

	var month_names = {
		'jan' : 1,
		'january': 1,
		'feb': 2,
		'february': 2,
		'mar': 3,
		'march': 3,
		'apr': 4,
		'april': 4,
		'may': 5,
		'jun': 6,
		'june': 6,
		'jul': 7,
		'july': 7,
		'aug': 8,
		'august': 8,
		'sep': 9,
		'september': 9,
		'oct': 10,
		'october': 10,
		'nov': 11,
		'november': 11,
		'dec': 12,
		'december': 12 };

	month_param = month_param.toLowerCase();
	if (month_param in month_names)
		return month_names[month_param];
	return false;
}

ProgramCal.prototype.parse_command_line=function() {
	var parser = new PosixGetOpt('m(monday)' +
				     's(sunday)' +
				     '\u1000(help)' +
				     '\u1001(version)', this.argv);


	var option;
	while ((option = parser.getopt()) !== undefined) {
		switch (option.option)
		{
		case 'm':
			this.week_starts_on_monday = true;
			break;
		case 's':
			this.week_starts_on_monday = false;
			break;
		case '\u1000':
			this.show_help();
			this.exit(0);

		case '\u1001':
			this.show_version();
			this.exit(0);

		default:
			this.error_invalid_argument(option.errmsg);
		}
	}

	var args = this.argv.slice(parser.optind());

	var d = new Date();

	var month = d.getUTCMonth() + 1;
	var year = d.getUTCFullYear();
	var display_one_month = true;

	if (args.length==1) {
		year = args[0];
		month = null;
		display_one_month = false;
	}
	if (args.length==2) {
		month = args[0];
		year = args[1];
	}
	if (args.length>2)
		this.error_invalid_argument("extra operand: '" + args[2] + '"');

	/* Validate year / month */
	if (month) {
		var month_val = this.get_month_value(month);
		if (!month_val)
			this.error_invalid_argument("invalid month value '" + month + "'");
		month = month_val;
	}

	if (!ob_utils.IsStrictDecimalIntegerValue(year))
		this.error_invalid_argument("invalid year value '" + year + "'");
	year = parseInt(year);

	if (year<1970)
		this.exit_error('years before 1970 are not supported in this system');

	this.year = year;
	this.month = month;
	this.display_one_month = display_one_month;
}

ProgramCal.prototype.print_month=function(month,year,print_year) {
	var month_to_name = [
		'none',
		'January',
		'February',
		'March',
		'April',
		'May',
		'June',
		'July',
		'August',
		'September',
		'October',
		'November',
		'December'];

	var caption;
	if (print_year)
		caption = sprintf.sprintf("   %8s %d", month_to_name[month], year);
	else
		caption = sprintf.sprintf("      %-8s", month_to_name[month]);
	this.runtime.stdout.put_line(caption);

	/* TODO: optionally start week on sunday */
	var day_of_week_header = (this.week_starts_on_monday)
				?"Mo Tu We Th Fr Sa Su"
				:"Su Mo Tu We Th Fr Sa";
	this.runtime.stdout.put_line(day_of_week_header);

	var dt = new Date(year,month-1,1,12,0,0,0);
	var sec_since_epoch = dt.getTime()/1000;

	var day_of_week = dt.getUTCDay();
	if (this.week_starts_on_monday)
		day_of_week = (day_of_week==0)?6:(day_of_week-1);

	var cal_line = "";
	for (var i=0;i<day_of_week;++i)
		cal_line = cal_line + "   ";

	/* Iterate days until next month */
	while (1) {
		cal_line = cal_line + sprintf.sprintf("%2d ", dt.getUTCDate());
		if (day_of_week == 6) {
			this.runtime.stdout.put_line(cal_line);
			cal_line = "";
		}

		/* advanced one day */
		sec_since_epoch += 86400;
		dt = new Date(sec_since_epoch*1000);

		day_of_week = dt.getUTCDay();
		if (this.week_starts_on_monday)
			day_of_week = (day_of_week==0)?6:(day_of_week-1);

		/* crossed over to following month - then stop */
		if ((dt.getUTCMonth() + 1) != month)
			break;
	}
	/* Print remaining days, if any */
	if (cal_line)
		this.runtime.stdout.put_line(cal_line);
	this.runtime.stdout.put_line("");
}


ProgramCal.prototype.internal_run=function() {

	this.parse_command_line();

	if (this.display_one_month) {
		this.print_month(this.month,this.year,true);
	} else {
		this.runtime.stdout.put_line("       " + this.year);
		for (var i = 1; i<=12; ++i)
			this.print_month(i,this.year,false);
	}

	return 0;
}

