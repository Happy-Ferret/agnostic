/*
   This file is part of UNIX Guide for the Perplexed project.
   Copyright (C) 2014 by Assaf Gordon <assafgordon@gmail.com>
   Released under GPLv3 or later, with the following addition:

     As additional permission under GNU GPL version 3 section 7, you
     may distribute non-source (e.g., minimized or compacted) forms of
     that code without the copy of the GNU GPL normally required by
     section 4, provided you include this license notice and a URL
     through which recipients can access the Corresponding Source.

   See: https://www.gnu.org/philosophy/javascript-trap.html

   POSIX Shell Command Language Standard:
   http://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html
*/

/*
A Naive implementation of 'sh', supporting only 'sh -c CMD'
*/


var sprintf = require('utils/sprintf');
var PosixGetOpt = require('utils/posix-getopt');
var ProgramBase = require('programs/program_base');
var Filesystem = require('os/filesystem');

require("utils/shell_parser_loader");
require('shell/shell_executor2');

function ProgramShell() {
	this.name = "ProgramShell";
	this.program_name = "sh";
	this.command_or_script = "" ;
	this.external_programs = { } ;
}

ProgramShell.prototype = new ProgramBase.ProgramBase();
ProgramShell.prototype.constructor = ProgramShell;

ProgramShell.prototype.add_external_program=function(progname,prog_function) {
	this.external_programs[progname] = prog_function ;
}

ProgramShell.prototype.parse_command_line=function() {
/*
In the future, support more parameteres (or reading script from STDIN/shebang?).
Currently, this shell MUST be invoked with as 'sh -c CMD'

TODO:
	support "--help" and "--version" ?
*/
	if (this.argv.length<2)
		this.error_invalid_argument("missing arguments (expecting -c CMD)");
	if (this.argv[0] !== "-c")
		this.error_invalid_argument("invalid 1st argument, expecting -c");
	this.command_or_script = this.argv[1];
	if (this.argv.length>2)
		this.error_invalid_argument("too many arguments (expecting -c CMD)");
}

ProgramShell.prototype.internal_run=function() {

	var exit_code = 0;

	this.parse_command_line();

	try {
		/* Parse shell command given by the user */
		var parser = load_shell_parser();
		var shell_parse_tree = parser.parse(this.command_or_script);
		var exec = new ShellExecutor(this.runtime, this.external_programs);
		exit_code = exec.ExecuteCommand(shell_parse_tree);
	} catch (e) {
		if (e instanceof parser.SyntaxError) {
			this.exit_error("Syntax Error: " + e.message);
		} else {
			throw e;
		}
	}

	return exit_code;
}

module.exports = {
	"ProgramShell" : ProgramShell
};
