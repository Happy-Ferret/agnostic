/*
   This file is part of UNIX Guide for the Perplexed project.
   Copyright (C) 2014 by Assaf Gordon <assafgordon@gmail.com>
   Released under GPLv3 or later, with the following addition:

     As additional permission under GNU GPL version 3 section 7, you
     may distribute non-source (e.g., minimized or compacted) forms of
     that code without the copy of the GNU GPL normally required by
     section 4, provided you include this license notice and a URL
     through which recipients can access the Corresponding Source.

   See: https://www.gnu.org/philosophy/javascript-trap.html

   POSIX Shell Command Language Standard:
   http://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html
*/

/*
A Naive implementation of cat(1)
*/
"use strict";

var ob_utils = require('utils/object_utils');
var sprintf = require('utils/sprintf');
var PosixGetOpt = require('utils/posix-getopt');
var ProgramBase = require('programs/program_base');
var Filesystem = require('os/filesystem');

module.exports = ProgramCat;

function ProgramCat() {
	this.name = "ProgramCat";
	this.program_name = "cat";
	this.files = [] ; //input file names
	this.show_ends = false ; // -E --show-ends (show line ends)
	this.show_tabs = false ; // -T --show-tabs (show tabs as ^I)
	this.show_number = false; // -n --number (number all output lines)
	this.number_nonblank = false; // -b --number-nonblank
	this.show_nonprinting = false; // -v --show-nonprinting
	this.squeeze_blank = false; //-s
	this.current_line = 0 ;
	this.last_line_blank = false;
}
ProgramCat.prototype = new ProgramBase();
ProgramCat.prototype.constructor = ProgramCat;

ProgramCat.prototype.parse_command_line=function() {
	var parser = new PosixGetOpt('A(show-all)b(number-nonblank)eE(show-ends)n(number)s(squeeze_blank)tT(show-tabs)uv(show-nonprinting)\u1000(help)\u1001(version)', this.argv);

	var option;
	while ((option = parser.getopt()) !== undefined) {
		switch (option.option) {
			case 'A': //-A --show-all => -vET
				this.show_nonprinting = true;
				this.show_ends = true;
				this.show_tabs = true;
				break;

			case 'b': //-b --number-nonblank
				this.number_nonblank = true;
				this.show_number = true;
				break;

			case 'e': // -e  => -vE
				this.show_ends = true;
				this.show_nonprinting = true;
				break;

			case 'E':
				this.show_ends = true;
				break;

			case 'n': // -n --number
				this.show_number = true;
				break;

			case 's': // -s --squeeze-blank
				this.squeeze_blank = true;
				break;

			case 't': //-t => -vT
				this.show_nonprinting = true;
				this.show_tabs = true;
				break;

			case 'T': //-T --show-tabs
				this.show_tabs = true;
				break;

			case 'u': // (ignored)
				break;

			case 'v':
				this.show_nonprinting = true;
				break;

			case '\u1000':
				this.show_help();
				this.exit(0);

			case '\u1001':
				this.show_version();
				this.exit(0);

			default:
				this.error_invalid_argument(option.errmsg);
		}
	}

	// Get first/increment/last parameters
	var args = this.argv.slice(parser.optind());
	// If no files are given, process "stdin"
	if (args.length === 0)
		args.push("-");
	this.files = args ;
}


ProgramCat.prototype.cat_content=function(content) {
	for (var i in content) {
		var line = content[i];
		var blank_line = (line === "");

		if (this.squeeze_blank && blank_line && this.last_line_blank)
			continue;

		if (!this.number_nonblank || !blank_line)
			this.current_line ++ ;

		if (this.show_ends)
			line = line + '$';

		if (this.show_tabs)
			line = line.replace(/\t/g, "^I");

		if (this.show_number) {
			if (!blank_line || !this.number_nonblank)
				line = sprintf.sprintf("%6d  ", this.current_line) + line;
		}

		this.runtime.stdout.put_line(line);

		this.last_line_blank = blank_line ;
	}
}

ProgramCat.prototype.cat_stdin=function() {
	if (this.lines===0)
		return ;
	var content = this.runtime.stdin.get_all_lines();
	this.cat_content(content);
}

ProgramCat.prototype.cat_file=function(filename) {
	var fl = {} ;
	try {
		fl = this.runtime.getFS().openfile(filename,false);
	} catch (e) {
		if (e instanceof this.runtime.getFS().exception) {
			this.exit_error(e.toString());
		} else {
			throw e;
		}
	}
	if (this.lines===0)
		return ;
	var content = fl.get_all_lines();
	this.cat_content(content);
}

ProgramCat.prototype.internal_run=function() {
	this.parse_command_line();

	this.current_line = 0 ; //reset line counter
	this.last_line_blank = false;

	for( var i in this.files ) {
		var filename = this.files[i];
		if (filename === "-")
			this.cat_stdin();
		else
			this.cat_file(filename);
	}

	return 0;
}
