/*
   This file is part of UNIX Guide for the Perplexed project.
   Copyright (C) 2014 by Assaf Gordon <assafgordon@gmail.com>
   Released under GPLv3 or later, with the following addition:

     As additional permission under GNU GPL version 3 section 7, you
     may distribute non-source (e.g., minimized or compacted) forms of
     that code without the copy of the GNU GPL normally required by
     section 4, provided you include this license notice and a URL
     through which recipients can access the Corresponding Source.

   See: https://www.gnu.org/philosophy/javascript-trap.html

   POSIX Shell Command Language Standard:
   http://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html
*/

/*
A Naive implementation of head(1)
*/
"use strict";

var ob_utils = require('utils/object_utils');
var sprintf = require('utils/sprintf');
var PosixGetOpt = require('utils/posix-getopt');
var ProgramBase = require('programs/program_base');
var Filesystem = require('os/filesystem');

module.exports = ProgramHead;

function ProgramHead() {
	this.name = "ProgramHead";
	this.program_name = "head";
	this.verbose = false;
	this.quiet = false;
	this.lines = "10" ; //note: must start as a string
	this.bytes = null ;
	this.files = [] ; //input file names
}
ProgramHead.prototype = new ProgramBase();
ProgramHead.prototype.constructor = ProgramHead;

ProgramHead.prototype.parse_command_line=function() {
	var parser = new PosixGetOpt(':1234567890c:(bytes)n:(lines)q(quiet)v(verbose)\u1002(silent)\u1000(help)\u1001(version)', this.argv);

	var option;
	while ((option = parser.getopt()) !== undefined) {
		switch (option.option) {
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
				//Discouraged but still supported usage,
				//e.g.  head -4 FILE
				this.lines = parseInt(option.option,10);
				break;

			case 'c':
				this.bytes = option.optarg;
				break;

			case 'n':
				this.lines = option.optarg;
				break;

			case 'q':
				this.quiet = true ;
				break;

			case 'v':
				this.verbose = true ;
				break;

			case '\u1002':
				this.quiet = true ;
				break;

			case '\u1000':
				this.show_help();
				this.exit(0);

			case '\u1001':
				this.show_version();
				this.exit(0);

			default:
				this.error_invalid_argument(option.errmsg);
		}
	}

	// Get first/increment/last parameters
	var args = this.argv.slice(parser.optind());
	// If no files are given, process "stdin"
	if (args.length === 0)
		args.push("-");
	this.files = args ;

	// Default for multiple files is showing file names,
	// unless quiet/verbose is explicitly specified
	if ( (args.length>1) && !this.quiet && !this.verbose )
		this.verbose = true;

	// Valid but not supported in Agnostic Unix Emulation
	if (this.bytes)
		this.error_not_implemented_feature("-c/--bytes", "head with bytes is not implemented");

	var multiplier = 1 ;
	if (/b$/.test(this.lines)) multiplier = 512;
	if (/kB$/.test(this.lines)) multiplier = 1000;
	if (/K$/.test(this.lines)) multiplier = 1024;
	if (/MB$/.test(this.lines)) multiplier = 1000*1000;
	if (/M$/.test(this.lines)) multiplier = 1024*1024;
	if (/GB$/.test(this.lines)) multiplier = 1000*1000*1000;
	if (/G$/.test(this.lines)) multiplier = 1024*1024*1024;
	//TODO: implement T/P/E/Z/Y ?

	//remove multiplier
	this.lines = this.lines.replace(/(b|kB|K|MB|M|GB|G)$/, "");

	if (!ob_utils.IsStrictDecimalIntegerValue(this.lines))
		this.error_invalid_argument(this.lines + ": invalid number of lines");
	this.lines = parseInt(this.lines) * multiplier;
}


ProgramHead.prototype.head_content=function(filename,content) {
	if (this.verbose) {
		if (filename === "-")
			filename = "standard input";
		this.runtime.stdout.put_line("==> " + filename + " <==");
	}

	if (content.length===0)
		return ;

	if (this.lines>0) {
		content = content.slice(0,this.lines);
	} else {
		//not enough lines... print nothing
		if (content.length < (- this.lines))
			return ;

		content = content.slice(0,content.length + this.lines);
	}
	this.runtime.stdout.put_lines(content);
}


ProgramHead.prototype.internal_run=function() {
	this.parse_command_line();

	this.process_files ( this.files, this.head_content ) ;

	return 0;
}
