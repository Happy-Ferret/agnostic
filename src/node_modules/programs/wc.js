/*
   This file is part of UNIX Guide for the Perplexed project.
   Copyright (C) 2014 by Assaf Gordon <assafgordon@gmail.com>
   Released under GPLv3 or later, with the following addition:

     As additional permission under GNU GPL version 3 section 7, you
     may distribute non-source (e.g., minimized or compacted) forms of
     that code without the copy of the GNU GPL normally required by
     section 4, provided you include this license notice and a URL
     through which recipients can access the Corresponding Source.

   See: https://www.gnu.org/philosophy/javascript-trap.html
*/

/*
A Naive implementation of wc(1)
See
http://pubs.opengroup.org/onlinepubs/009604499/utilities/wc.html

NOTE:
Major differences from "correct" POSIX systems:
1. Current streams/files do not have "NEWLINES", but instead have array of lines.
   so "wc -l" does not count NEWLINES but lines in the array.
   The difference is examplified by:
	printf "hello" | wc -l
   Which gives "0" on a real POSIX syste,, but currently not in Agnostic.

2. There are not locales or multi-byte strings, "wc -b" and "wc -m" return
   the same values.
*/
"use strict";


var sprintf = require('utils/sprintf');
var str_utils = require('utils/string_utils');
var PosixGetOpt = require('utils/posix-getopt');
var ProgramBase = require('programs/program_base');
var Filesystem = require('os/filesystem');

module.exports = ProgramWc;

function ProgramWc() {
	this.name = "ProgramWc";
	this.program_name = "wc";
	this.files = [] ; //input file names
	this.count_lines = false ;
	this.count_bytes = false ;
	this.count_chars = false ;
	this.count_words = false ;
	this.count_max_line_length = false;
	this.show_file_names = false ;
	this.show_totals = false ;

	this.total_lines = 0 ;
	this.total_bytes = 0 ;
	this.total_chars = 0 ;
	this.total_words = 0 ;
	this.global_max_line_length = 0;
}
ProgramWc.prototype = new ProgramBase();
ProgramWc.prototype.constructor = ProgramWc;

ProgramWc.prototype.parse_command_line=function() {
	var parser = new PosixGetOpt(':c(bytes)m(chars)l(lines)L(max-line-length)w(words)\u1002:(files0-from)\u1000(help)\u1001(version)', this.argv);

	var option;
	while ((option = parser.getopt()) !== undefined) {
		switch (option.option) {
			case 'c':
				this.count_bytes = true;
				break;

			case 'm':
				this.count_chars = true;
				break;

			case 'l':
				this.count_lines = true;
				break;

			case 'L':
				this.count_max_line_length = true ;
				break;

			case 'w':
				this.count_words = true;
				break;

			case '\u1002': //files0-from
				this.error_not_implemented_feature("--files0-from","not implemented in Agnostic");
				break;


			case '\u1000':
				this.show_help();
				break;

			case '\u1001':
				this.show_version();
				break;

			default:
				this.error_invalid_argument(option.errmsg);
		}
	}

	if ( ! ( this.count_bytes || this.count_chars || this.count_lines || this.count_words || this.count_max_line_length ) ) {
		// default counting if no options specified
		this.count_bytes = true;
		this.count_words = true;
		this.count_lines = true ;
	}

	// Get first/increment/last parameters
	var args = this.argv.slice(parser.optind());
	// If no files are given, process "stdin"
	if (args.length === 0) {
		args.push("-");
	} else {
		// any file name is given on the command line, show file names.
		this.show_file_names = true ;
	}
	this.files = args ;

	// if more than one file specified, show totals
	if (args.length>1)
		this.show_totals = true ;
}


ProgramWc.prototype.wc_content=function(filename,content) {
	var _lines = content.length;
	var _bytes = 0 ;
	var _chars = 0 ;
	var _words = 0 ;
	var _max_line_length = 0 ;

	// Count input
	for (var i in content) {
		var line = content[i];

		_bytes += line.length + 1 ; // "+1" to EMULATE a newline
		_chars += line.length + 1 ;
		if (line.length > _max_line_length)
			_max_line_length = line.length ;

		_words += str_utils.trimWhitespace(line).split(/[ \t]+/).length ;
	}


	// Generate output
	var output = [] ;
	if (this.count_lines) output.push( _lines );
	if (this.count_words) output.push( _words );
	if (this.count_bytes) output.push( _bytes );
	if (this.count_chars) output.push( _chars );
	if (this.count_max_line_length) output.push( _max_line_length );
	if (this.show_file_names) output.push(filename);
	var text = output.join(" ");
	this.runtime.stdout.put_line(text);

	// Update totals
	this.total_bytes += _bytes ;
	this.total_chars += _chars ;
	this.total_words += _words ;
	this.total_lines += _lines ;
	if (_max_line_length > this.global_max_line_length)
		this.global_max_line_length = _max_line_length;
}

ProgramWc.prototype.wc_stdin=function() {
	var content = this.runtime.stdin.get_all_lines();
	this.wc_content("-",content);
}

ProgramWc.prototype.wc_file=function(filename) {
	var fl = {} ;
	try {
		fl = this.runtime.getFS().openfile(filename,false);
	} catch (e) {
		if (e instanceof this.runtime.getFS().exception) {
			this.exit_error(e.toString());
		} else {
			throw e;
		}
	}
	var content = fl.get_all_lines();
	this.wc_content(filename, content);
}

ProgramWc.prototype.internal_run=function() {
	this.parse_command_line();

	this.total_lines = 0 ;
	this.total_bytes = 0 ;
	this.total_chars = 0 ;
	this.total_words = 0 ;
	this.global_max_line_length = 0;

	for( var i in this.files ) {
		var filename = this.files[i];
		if (filename === "-")
			this.wc_stdin();
		else
			this.wc_file(filename);
	}

	if (this.show_totals) {
		var output = [] ;
		if (this.count_lines) output.push( this.total_lines );
		if (this.count_words) output.push( this.total_words );
		if (this.count_bytes) output.push( this.total_bytes );
		if (this.count_chars) output.push( this.total_chars );
		if (this.count_max_line_length) output.push( this.global_max_line_length );
		output.push("total");
		var text = output.join(" ");
		this.runtime.stdout.put_line(text);
	}

	return 0;
}
