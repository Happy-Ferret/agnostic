/*
   This file is part of UNIX Guide for the Perplexed project.
   Copyright (C) 2014 by Assaf Gordon <assafgordon@gmail.com>
   Released under GPLv3 or later, with the following addition:

     As additional permission under GNU GPL version 3 section 7, you
     may distribute non-source (e.g., minimized or compacted) forms of
     that code without the copy of the GNU GPL normally required by
     section 4, provided you include this license notice and a URL
     through which recipients can access the Corresponding Source.

   See: https://www.gnu.org/philosophy/javascript-trap.html

   POSIX Shell Command Language Standard:
   http://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html
*/

/*
A Naive implementation of test(1)

NOTE:
This implementation supports the LIMITED, non-obsolete form of 1,2,3,4 parameters,
WITHOUT -a / -o / () .

See:
http://pubs.opengroup.org/onlinepubs/9699919799/utilities/test.html

*/
"use strict";

var ob_utils = require('utils/object_utils');
var sprintf = require('utils/sprintf');
var PosixGetOpt = require('utils/posix-getopt');
var ProgramBase = require('programs/program_base');
var Filesystem = require('os/filesystem');
var path_utils = require('utils/path_utils');

module.exports = ProgramTest;

function ProgramTest() {
	this.name = "ProgramTest";
	this.program_name = "test";
}
ProgramTest.prototype = new ProgramBase();
ProgramTest.prototype.constructor = ProgramTest;

/* Given the string of the orimary operator, returns:
    1: it's an unary primary operator (e.g. '-z')
    2: it's a binary primary operator (e.g. '-eq')
    0: not a valid operator
*/
ProgramTest.prototype.primary_type=function(op) {
	switch (op)
	{
	case '-b':
	case '-c':
	case '-d':
	case '-e':
	case '-f':
	case '-g':
	case '-h':
	case '-L':
	case '-n':
	case '-p':
	case '-r':
	case '-S':
	case '-s':
	case '-t':
	case '-u':
	case '-w':
	case '-x':
	case '-z':
		return 1;

	case '=':
	case '!=':
	case '-eq':
	case '-ne':
	case '-gt':
	case '-ge':
	case '-lt':
	case '-le':
		return 2;

	default:
		return 0;
	}
}

/* Perfosm one of the UNARY primary operators for test.
NOTE:
returns JAVASCRIPB BOOLEAN (true/false), not zero/one.
*/
ProgramTest.prototype.unary_op=function(op,param) {
	switch (op)
	{

	/* Unsupported features (yet) */
	case '-b': /* block device file */
	case '-c': /* character device file */
	case '-g': /*  set-group-id */
	case '-h': /* symbolic link */
	case '-L': /* symbolic link */
	case '-p': /* FIFO */
	case '-S': /* socket */
	case '-t': /* file descriptor is terminal */
	case '-u': /* set-user-id */
		return false;

	case '-d': /* directory */
		var filename = path_utils.resolve ( this.runtime.getcwd(), param ) ;
		return this.runtime.getFS().is_directory(filename);

	case '-e': /* path exists */
		var filename = path_utils.resolve ( this.runtime.getcwd(), param ) ;
		return this.runtime.getFS().path_exists(filename);

	case '-f': /* regular file */
		var filename = path_utils.resolve ( this.runtime.getcwd(), param ) ;
		return this.runtime.getFS().is_file(filename);

	case '-n':
		return (param.length>0);

	case '-r': /* read permissions */
	case '-w': /* write permissions */
		var filename = path_utils.resolve ( this.runtime.getcwd(), param ) ;
		if (this.runtime.getFS().path_exists(filename))
			return true;
		return false;

	case '-s': /* true if file has non-zero size */
		try {
			var filename = path_utils.resolve ( this.runtime.getcwd(), param ) ;
			var fl = this.runtime.getFS().openfile(filename,false);
			var st = fl.stat();
			return (st.size > 0);
		} catch (e) {
			return false;
		}


	case '-x': /* executable files */
		return false;

	case '-z':
		return (param.length==0);

	default:
		this.exit_error("invalid unary operator '" + op + '"');
	}
}

/* Perfosm one of the UNARY primary operators for test.
NOTE:
returns JAVASCRIPB BOOLEAN (true/false), not zero/one.
*/
ProgramTest.prototype.binary_op=function(param1,op,param2) {
	switch (op)
	{
	case '=':
		return param1.toString() === param2.toString();

	case '!=':
		return param1.toString() !== param2.toString();

	case '-eq':
	case '-ne':
	case '-gt':
	case '-ge':
	case '-lt':
	case '-le':
		if (!ob_utils.IsStrictDecimalIntegerValue(param1))
			this.exit_error("operator '" +op+"': integer expression expected, got '" + param1 + "'");
		if (!ob_utils.IsStrictDecimalIntegerValue(param2))
			this.exit_error("operator '" +op+"': integer expression expected, got '" + param2 + "'");
		var num1 = parseInt(param1);
		var num2 = parseInt(param2);
		switch (op)
		{
		case '-eq': return num1 === num2;
		case '-ne': return num1 !== num2;
		case '-gt': return num1 > num2;
		case '-ge': return num1 >= num2;
		case '-lt': return num1 < num2;
		case '-le': return num1 <= num2;
		}
		break;

	default:
		this.exit_error("invalid binary operator '" + op + '"');
	}
}

ProgramTest.prototype.internal_run=function() {

	if (this.argv.length===0)
		return 1;

	if (this.argv.length===1) {
		var text = this.argv[0];
		return (text.length>0)?0:1;
	}

	if (this.argv.length===2) {
		var op1 = this.argv[0];
		var op2 = this.argv[1];

		if (op1 === "!")
			return (op2.length>0)?1:0;

		if (this.primary_type(op1)===1)
			return this.unary_op(op1,op2)?0:1;

		this.error_invalid_argument("invalid test operator");
	}

	if (this.argv.length===3) {
		var op1 = this.argv[0];
		var op2 = this.argv[1];
		var op3 = this.argv[2];

		if (this.primary_type(op2)===2)
			return this.binary_op(op1,op2,op3)?0:1;

		if (op1 === "!" && (this.primary_type(op2)===1))
			return this.unary_op(op2,op3)?1:0;

		this.error_invalid_argument("invalid test operator");
	}

	if (this.argv.length===4) {
		var op1 = this.argv[0];
		var op2 = this.argv[1];
		var op3 = this.argv[2];
		var op4 = this.argv[3];

		if (op1 === "!" && (this.primary_type(op3)===2))
			return this.binary_op(op2,op3,op4)?1:0;

		this.error_invalid_argument("invalid test operator");
	}
	return 1;
}
