/*
   This file is part of UNIX Guide for the Perplexed project.
   Copyright (C) 2014 by Assaf Gordon <assafgordon@gmail.com>
   Released under GPLv3 or later, with the following addition:

     As additional permission under GNU GPL version 3 section 7, you
     may distribute non-source (e.g., minimized or compacted) forms of
     that code without the copy of the GNU GPL normally required by
     section 4, provided you include this license notice and a URL
     through which recipients can access the Corresponding Source.

   See: https://www.gnu.org/philosophy/javascript-trap.html

   POSIX Shell Command Language Standard:
   http://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html
*/

/*
This module is the base class for program emulation.
*/
"use strict";

var ob_utils = require('utils/object_utils');
var ProcessState = require('os/process_state');

module.exports = ProgramBase;


/*
ProgramBase - the base class of all executable programs.
*/
function ProgramBase() {
	this.name = "ProgramBase" ;
	this.program_name = "(base)" ; // to be set by sub-classes
	this.runtime = {} ; //will be the ProcessState object in run()
	this.argv = [] ; //will be set to argv in run()
	this.argv0 = "" ; //the first element in argv - implies the program name
}

/*
*/
ProgramBase.prototype.run = function(process_state,argv) {
	if (! (process_state instanceof ProcessState))
		throw new TypeError("run() called with wrong parameter (1st param is not ProcessState)");
	//Detect uninitialized ProcessState's STDIN/STDOUT/STDERR
	if (process_state.stderr === null)
		throw new TypeError("run() called with process_stae.stderr==null");
	if (process_state.stdout === null)
		throw new TypeError("run() called with process_stae.stdout==null");
	if (process_state.stdin === null)
		throw new Typerror("run() called with process_stae.stdin==null");

	if (!ob_utils.IsArray(argv) )
		throw new TypeError("run() called with wrong parameter (2nd param is not array of command-line parameters)");
	if (argv.length===0)
		throw new TypeError("run() called with empty argv");

	argv.forEach(ob_utils.VerifyString);

	this.argv0 = argv.shift();
	this.argv = argv;

	this.runtime = process_state ;

	var exit_code = 1 ;
	this.runtime.last_exit_code = exit_code ;

	try {
		exit_code = this.internal_run();
	} catch (err) {
		/* TODO: Fix some javascriptism:
			sub-classes throwing "ProgramBase.ProgramExitFailure
			are not properly caught here. likely my incorrect
			usage of javascript classes/modules/exports? */
		if (err instanceof ProgramExitSuccess) {
			exit_code = 0 ;
		}
		else if (err instanceof ProgramExitFailure) {
			if (err["message"])
				this.runtime.stderr.put_line(err.message);
			exit_code = err.exit_code;
		}
		else {
			throw err;
		}
	}
	this.runtime.last_exit_code = exit_code ;
	return exit_code;
}

ProgramBase.prototype.show_try_help = function() {
	this.runtime.stderr.put_line("Try '" + this.program_name + " --help' for more information.");
}

ProgramBase.prototype.error_invalid_argument = function(msg) {
	VerifyString(msg);
	this.runtime.stderr.put_line(this.program_name + ": " + msg);
	this.show_try_help();
	throw new ProgramExitFailure(1);
}

/* Similar to errx(1) */
ProgramBase.prototype.exit_error = function(msg) {
	this.runtime.stderr.put_line(this.program_name + ": " + msg);
	throw new ProgramExitFailure(1);
}

ProgramBase.prototype.error_not_implemented_feature = function(feature,msg) {
	VerifyString(feature);
	VerifyString(msg);
	throw new ProgramFeatureNotImplemented(this.program_name, feature, msg);
}

ProgramBase.prototype.internal_run=function() {
	console.log("ProgramBase.internal_Run...");
	throw new ProgramExitFailure(1,"Not implemented");
}

/*
ProgramExitSuccess Exception -
A helper exception to simulate exit(3) call from anywhere inside a running program.

Throwing this exception will emulate a successful termination with exit code 0.

Example:
	throw new ProgramExitSuccess()
*/
function ProgramExitSuccess() {
	this.name = "ProgramExitSuccess";
}
ProgramExitSuccess.prototype = new Error();
ProgramExitSuccess.prototype.constructor = ProgramExitSuccess;

/*
ProgramExitFailure Exception -
A helper exception to simulate errx(3) call from anywhere inside a running program.

Throwing this exception will emulate a failed termination with the specified
exit code 0, and a message printed to STDERR.

Example:
	throw new ProgramExitFaillure(1,"file not found");
*/
function ProgramExitFailure(ExitCode,message) {
	this.name = "ProgramExitFailure";
	this.exit_code = ExitCode ;
	this.message = message ;
}
ProgramExitFailure.prototype = new Error();
ProgramExitFailure.prototype.constructor = ProgramExitFailure;

/*
A fatal error (related to Javascript operation or internal error) during
program execution.
*/
function ProgramExecutionError(message) {
	this.name = "ProgramExecutionError";
	this.message = message ;
}
ProgramExecutionError.prototype = new Error();
ProgramExecutionError.prototype.constructor = ProgramExecutionError;

/*
Special Exception for the Agnostic Emulation Envrionment:
Programs can recognize valid/existin features in POSIX system,
which are not implemented in this emulation/teaching environment.

Instead of giving a cryptic or misleading error (e.g. "invalid option"),
it is better to tell the user this feature si valid and exists on "real" posix
system, just not in this emulator.
*/
function ProgramFeatureNotImplemented(progname,feature,message) {
	this.name = "ProgramFeatureNotImplemented";
	this.progname = progname;
	this.feature = feature;
	this.message = message;
}
ProgramFeatureNotImplemented.prototype = new Error();
ProgramFeatureNotImplemented.prototype.constructor = ProgramFeatureNotImplemented;
