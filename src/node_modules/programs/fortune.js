/*
   This file is part of UNIX Guide for the Perplexed project.
   Copyright (C) 2014 by Assaf Gordon <assafgordon@gmail.com>
   Released under GPLv3 or later, with the following addition:

     As additional permission under GNU GPL version 3 section 7, you
     may distribute non-source (e.g., minimized or compacted) forms of
     that code without the copy of the GNU GPL normally required by
     section 4, provided you include this license notice and a URL
     through which recipients can access the Corresponding Source.

   See: https://www.gnu.org/philosophy/javascript-trap.html

*/

/*
A partial implementation of fortune(1)
*/
"use strict";

var ob_utils = require('utils/object_utils');
var PosixGetOpt = require('utils/posix-getopt');
var ProgramBase = require('programs/program_base');
var fortunes_data = require('programs/fortunes_data');

module.exports = ProgramFortune;

function ProgramFortune() {
	this.name = "ProgramFortune";
	this.program_name = "fortune";
	this.limit_file = null;
	this.list_files = null;
}
ProgramFortune.prototype = new ProgramBase();
ProgramFortune.prototype.constructor = ProgramFortune;

ProgramFortune.prototype.parse_command_line=function() {
	var parser = new PosixGetOpt('f' +
				     '\u1000(help)' +
				     '\u1001(version)',
				     this.argv);
	var option;
	while ((option = parser.getopt()) !== undefined) {
		switch (option.option)
		{
		case 'f':
			this.list_files = true;
			break;

		case '\u1000':
			this.show_help();
			this.exit(0);

		case '\u1001':
			this.show_version();
			this.exit(0);

		default:
			this.error_invalid_argument(option.errmsg);
		}
	}

	// Get first/increment/last parameters
	var args = this.argv.slice(parser.optind());

	if (args.length==1) {
		this.limit_file = args[0];
		if (!(this.limit_file in fortunes_data))
			this.error_invalid_argument("invalid fortune file '" + this.limit_file + "'. Use -f to list available files");
	}
	if (args.length>1)
		this.error_invalid_argument("extra operand '" + args[1] + "'");
}

ProgramFortune.prototype.internal_run=function() {
	this.parse_command_line();

	if (this.list_files) {
		for (var file in fortunes_data) {
			this.runtime.stdout.put_line(file);
		}
		return 0;
	}

	var source ;
	if (this.limit_file) {
		source = fortunes_data[this.limit_file];
	} else {
		source = [] ;
		for (var file in fortunes_data) {
			source = source.concat(fortunes_data[file]);
		}
	}

	var count = source.length;
	var idx = Math.round((Math.random()*count));
	var text = source[idx];
	var lines = text.split("|");
	this.runtime.stdout.put_lines(lines);
	return 0;
}
